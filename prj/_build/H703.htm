<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\H703.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\H703.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sat Oct 14 09:56:14 2017
<BR><P>
<H3>Maximum Stack Usage =       2152 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; TaskBleUpfile &rArr; task_and_ble_data &rArr; TestPrintfaddr &rArr; TaskPrintfFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">NMI_Handler</a><BR>
 <LI><a href="#[15]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
 <LI><a href="#[18]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SVC_Handler</a><BR>
 <LI><a href="#[19]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">DebugMon_Handler</a><BR>
 <LI><a href="#[1a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">PendSV_Handler</a><BR>
 <LI><a href="#[1b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">SysTick_Handler</a><BR>
 <LI><a href="#[2b]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[2ac]">queue_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ac]">queue_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4c]">B_ReadWdtRunStatues</a> from wdt.o(i.B_ReadWdtRunStatues) referenced from wdt.o(i.V_InitWdt)
 <LI><a href="#[16]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[40]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[56]">Flash_Erase_Page</a> from in_flash_manage.o(i.Flash_Erase_Page) referenced from main.o(i.init_all)
 <LI><a href="#[55]">Flash_ReadData</a> from in_flash_manage.o(i.Flash_ReadData) referenced from main.o(i.init_all)
 <LI><a href="#[57]">Flash_Write_World</a> from in_flash_manage.o(i.Flash_Write_World) referenced from main.o(i.init_all)
 <LI><a href="#[22]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from bsp.o(i.HardFault_Handler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3f]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">LcdDisplayAlarm</a> from ui_app.o(i.LcdDisplayAlarm) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[8]">LcdDisplayBlood</a> from ui_app.o(i.LcdDisplayBlood) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[f]">LcdDisplayCharge</a> from ui_app.o(i.LcdDisplayCharge) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[9]">LcdDisplayDistance</a> from ui_app.o(i.LcdDisplayDistance) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[7]">LcdDisplayHr</a> from ui_app.o(i.LcdDisplayHr) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[a]">LcdDisplayK</a> from ui_app.o(i.LcdDisplayK) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[e]">LcdDisplayNotice</a> from ui_app.o(i.LcdDisplayNotice) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[4]">LcdDisplayOff</a> from ui_app.o(i.LcdDisplayOff) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[d]">LcdDisplayPair</a> from ui_app.o(i.LcdDisplayPair) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[c]">LcdDisplaySleep</a> from ui_app.o(i.LcdDisplaySleep) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[b]">LcdDisplaySportTime</a> from ui_app.o(i.LcdDisplaySportTime) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[6]">LcdDisplaySteps</a> from ui_app.o(i.LcdDisplaySteps) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[5]">LcdDisplayTime</a> from ui_app.o(i.LcdDisplayTime) referenced 2 times from ui_app.o(.data)
 <LI><a href="#[3a]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[39]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[38]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3b]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3c]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">RADIO_IRQHandler</a> from rfid52.o(i.RADIO_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3e]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4a]">RevRfDataRecall</a> from upfile.o(i.RevRfDataRecall) referenced from upfile.o(i.TaskBleUpfile)
 <LI><a href="#[4a]">RevRfDataRecall</a> from upfile.o(i.RevRfDataRecall) referenced from upfile.o(i.TaskPrintfFile)
 <LI><a href="#[4a]">RevRfDataRecall</a> from upfile.o(i.RevRfDataRecall) referenced from upfile.o(i.TaskUpFile)
 <LI><a href="#[4b]">RfRevFileRecall</a> from upfile.o(i.RfRevFileRecall) referenced from upfile.o(i.TaskP24UpdataFile)
 <LI><a href="#[23]">SAADC_IRQHandler</a> from nrf_drv_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrf_drv_spi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrf_drv_spi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3d]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">SWI2_EGU2_IRQHandler</a> from softdevice_handler.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[42]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[28]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[36]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[37]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">UARTE0_UART0_IRQHandler</a> from nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[43]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[4d]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[44]">acc_click_irq</a> from lis3dh_driver.o(i.acc_click_irq) referenced from lis3dh_driver.o(i.Acc__EnableClickDetect)
 <LI><a href="#[54]">acc_time_event_handler</a> from bsp.o(i.acc_time_event_handler) referenced from bsp.o(i.init_acc_time)
 <LI><a href="#[5e]">apple_notification_error_handler</a> from s132config.o(i.apple_notification_error_handler) referenced from s132config.o(i.services_init)
 <LI><a href="#[50]">ble_evt_dispatch</a> from s132config.o(i.ble_evt_dispatch) referenced from s132config.o(i.ble_stack_init)
 <LI><a href="#[1]">button_event_handler</a> from bsp.o(i.button_event_handler) referenced 2 times from bsp.o(.data)
 <LI><a href="#[52]">conn_params_error_handler</a> from s132config.o(i.conn_params_error_handler) referenced from s132config.o(i.conn_params_init)
 <LI><a href="#[53]">db_disc_handler</a> from s132config.o(i.db_disc_handler) referenced from s132config.o(i.db_discovery_init)
 <LI><a href="#[58]">delay_ms</a> from utility.o(i.delay_ms) referenced from main.o(i.init_all)
 <LI><a href="#[5b]">fds_evt_handler</a> from peer_data_storage.o(i.fds_evt_handler) referenced from peer_data_storage.o(i.pds_init)
 <LI><a href="#[11]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[2]">gcm_gscm_evt_handler</a> from gatt_cache_manager.o(i.gcm_gscm_evt_handler) referenced 2 times from gatts_cache_manager.o(.data)
 <LI><a href="#[62]">gcm_im_evt_handler</a> from gatt_cache_manager.o(i.gcm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[6a]">gcm_smd_evt_handler</a> from gatt_cache_manager.o(i.gcm_smd_evt_handler) referenced from security_dispatcher.o(.constdata)
 <LI><a href="#[68]">gscm_pdb_evt_handler</a> from gatts_cache_manager.o(i.gscm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[47]">hr_bp_event_handler</a> from hr_app.o(i.hr_bp_event_handler) referenced from hr_app.o(i.InitHeatRate)
 <LI><a href="#[65]">im_pdb_evt_handler</a> from id_manager.o(i.im_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[41]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[48]">motor_timeout_handler</a> from bsp.o(i.motor_timeout_handler) referenced from bsp.o(i.InitMotor)
 <LI><a href="#[5f]">nus_data_handler</a> from s132config.o(i.nus_data_handler) referenced from s132config.o(i.services_nus_init)
 <LI><a href="#[4e]">on_adv_evt</a> from s132config.o(i.on_adv_evt) referenced from s132config.o(i.advertising_init)
 <LI><a href="#[5d]">on_ancs_c_evt</a> from s132config.o(i.on_ancs_c_evt) referenced from s132config.o(i.services_init)
 <LI><a href="#[63]">pdb_pds_evt_handler</a> from peer_database.o(i.pdb_pds_evt_handler) referenced from peer_data_storage.o(.constdata)
 <LI><a href="#[5c]">pm_evt_handler</a> from s132config.o(i.pm_evt_handler) referenced from s132config.o(i.peer_manager_init)
 <LI><a href="#[3]">pm_gcm_evt_handler</a> from peer_manager.o(i.pm_gcm_evt_handler) referenced 2 times from gatt_cache_manager.o(.data)
 <LI><a href="#[61]">pm_im_evt_handler</a> from peer_manager.o(i.pm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[64]">pm_pdb_evt_handler</a> from peer_manager.o(i.pm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[6b]">pm_sm_evt_handler</a> from peer_manager.o(i.pm_sm_evt_handler) referenced from security_manager.o(.constdata)
 <LI><a href="#[49]">rtc_event_handler</a> from bsp.o(i.rtc_event_handler) referenced from bsp.o(i.RtcTimeInit)
 <LI><a href="#[59]">s132_config_enable</a> from s132config.o(i.s132_config_enable) referenced from main.o(i.init_all)
 <LI><a href="#[46]">saadc_callback</a> from battery_adc.o(i.saadc_callback) referenced from battery_adc.o(i.InitAdc)
 <LI><a href="#[66]">sm_pdb_evt_handler</a> from security_manager.o(i.sm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[69]">sm_smd_evt_handler</a> from security_manager.o(i.sm_smd_evt_handler) referenced from security_dispatcher.o(.constdata)
 <LI><a href="#[67]">smd_pdb_evt_handler</a> from security_dispatcher.o(i.smd_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[60]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[45]">spi_event_handler</a> from spi52.o(i.spi_event_handler) referenced from spi52.o(i.EnableSpi)
 <LI><a href="#[51]">sys_evt_dispatch</a> from s132config.o(i.sys_evt_dispatch) referenced from s132config.o(i.ble_stack_init)
 <LI><a href="#[5a]">sys_time_event_handler</a> from ui_time.o(i.sys_time_event_handler) referenced from ui_time.o(i.init_ui_time)
 <LI><a href="#[4f]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[43]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[3e9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[77]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3ea]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3eb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3ec]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3ed]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3ee]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_alg_send_data
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_alg_send_data
</UL>

<P><STRONG><a name="[3ef]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_history
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToQueue
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPrintfFile
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfWritePacket
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRevFileRecall
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevRfDataRecall
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFileIn
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTxOnly
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleQueueIn
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleQueueOut
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepRecord
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_insert
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdShowNotice
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_jump_index
</UL>

<P><STRONG><a name="[3f0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadCont
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHeatRate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3f1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3f2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_hr
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_time_point
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepRecord
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepIndex
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_get_notif_attrs
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_configure
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[3f3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12d]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevRfDataRecall
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRightBoard
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
</UL>

<P><STRONG><a name="[1c1]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_alg_send_data
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_alg_send_data
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3f4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3f6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3f7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[72]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[79]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[3f8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3f9]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>AccForLcdOnOff</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, bsp.o(i.AccForLcdOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AccForLcdOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSport
</UL>

<P><STRONG><a name="[7c]"></a>AccSensorConfig</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, lis3dh_driver.o(i.AccSensorConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = AccSensorConfig &rArr; kx023Init &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kx023Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetWaterMark
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetODR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetMode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetFullScale
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetBLE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetBDU
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetAxis
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetWHO_AM_I
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_FIFOModeEnable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acc__EnableClickDetect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[8a]"></a>Acc__EnableClickDetect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lis3dh_driver.o(i.Acc__EnableClickDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Acc__EnableClickDetect &rArr; LIS3DH_SetInt1Pin &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_on_pin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt1Pin
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetClickTHS
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetClickLIMIT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetClickLATENCY
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetClickCFG
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>

<P><STRONG><a name="[94]"></a>AskPair</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, s132config.o(i.AskPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = AskPair &rArr; pm_conn_secure &rArr; sm_link_secure &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_secure
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_bonds
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[9a]"></a>BleAskPacket</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, upfile.o(i.BleAskPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BleAskPacket &rArr; BleWriteData &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
</UL>

<P><STRONG><a name="[9c]"></a>BleFileIn</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, upfile.o(i.BleFileIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BleFileIn
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[9e]"></a>BleQueueIn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ble_fifo.o(i.BleQueueIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BleQueueIn
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[9f]"></a>BleQueueOut</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ble_fifo.o(i.BleQueueOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BleQueueOut
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[a0]"></a>BleSendResult</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, upfile.o(i.BleSendResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BleSendResult &rArr; BleWriteData &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemEmpty
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
</UL>

<P><STRONG><a name="[9b]"></a>BleWriteData</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, s132config.o(i.BleWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BleWriteData &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_real_time_datas
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendResult
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAskPacket
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_time_point
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepRecord
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepIndex
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarm
</UL>

<P><STRONG><a name="[e4]"></a>CalcCrc16</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, in_flash_manage.o(i.CalcCrc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalcCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileCrc
</UL>

<P><STRONG><a name="[124]"></a>CalcVoltageLever</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, battery_adc.o(i.CalcVoltageLever))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPower
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGetPower
</UL>

<P><STRONG><a name="[a3]"></a>CallByGsensor</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sleep.o(i.CallByGsensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CallByGsensor
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSport
</UL>

<P><STRONG><a name="[a5]"></a>ChangeToHightSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, s132config.o(i.ChangeToHightSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ChangeToHightSpeed &rArr; conn_params_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_normal_speed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHighSpeed
</UL>

<P><STRONG><a name="[a9]"></a>ChangeToRfid</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rfid52.o(i.ChangeToRfid))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ChangeToRfid &rArr; Nrf51Config_FUN &rArr; Nrf51Config &rArr; SB
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open32768
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf51Config_FUN
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskUpFile
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPrintfFile
</UL>

<P><STRONG><a name="[d1]"></a>CheckAddr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, in_flash_manage.o(i.CheckAddr))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_World
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Page
</UL>

<P><STRONG><a name="[1b4]"></a>CheckErase</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, sleep.o(i.CheckErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSleep
</UL>

<P><STRONG><a name="[92]"></a>CheckSum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, upfile.o(i.CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRevFileSendResult
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRevFileRecall
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AskPacket
</UL>

<P><STRONG><a name="[ad]"></a>ConvertToUTCTime</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, softwarertc.o(i.ConvertToUTCTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ConvertToUTCTime &rArr; GetWeek
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monthLength
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_history
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_step
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_hr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_history_step
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDateInMin
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process_if_change_day
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAndSec
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintfaddr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepIndex
</UL>

<P><STRONG><a name="[b0]"></a>DeleteQueue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queueu51822.o(i.DeleteQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DeleteQueue &rArr; Flash_Erase_Page &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePowerOn
</UL>

<P><STRONG><a name="[b3]"></a>DisplayAnaTime</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ui_support.o(i.DisplayAnaTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = DisplayAnaTime &rArr; TFT_ShowBmp_Flash_POINT &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash_POINT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_time
</UL>

<P><STRONG><a name="[b6]"></a>DisplayMonthDay</STRONG> (Thumb, 230 bytes, Stack size 88 bytes, ui_support.o(i.DisplayMonthDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = DisplayMonthDay &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_time
</UL>

<P><STRONG><a name="[ba]"></a>DisplayNumber</STRONG> (Thumb, 120 bytes, Stack size 96 bytes, ui_support.o(i.DisplayNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = DisplayNumber &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_time
</UL>

<P><STRONG><a name="[bb]"></a>Displayhhmm</STRONG> (Thumb, 336 bytes, Stack size 96 bytes, ui_support.o(i.Displayhhmm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = Displayhhmm &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_time
</UL>

<P><STRONG><a name="[bc]"></a>EEpromFindPosition</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, in_flash_manage.o(i.EEpromFindPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EEpromFindPosition &rArr; InflashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEEprom
</UL>

<P><STRONG><a name="[be]"></a>EEpromSetParaToFactory</STRONG> (Thumb, 708 bytes, Stack size 24 bytes, in_flash_manage.o(i.EEpromSetParaToFactory))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EEpromSetParaToFactory &rArr; EepromAnsy &rArr; EEpromWrite &rArr; Flash_Write_World &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_time_to_Second
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromAnsy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePowerOn
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEEprom
</UL>

<P><STRONG><a name="[c1]"></a>EEpromWrite</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, in_flash_manage.o(i.EEpromWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EEpromWrite &rArr; Flash_Write_World &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_World
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromAnsy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEEprom
</UL>

<P><STRONG><a name="[c0]"></a>EepromAnsy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, in_flash_manage.o(i.EepromAnsy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EepromAnsy &rArr; EEpromWrite &rArr; Flash_Write_World &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromSetParaToFactory
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePowerOn
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDateInMin
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process_if_change_day
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlgBootSys
</UL>

<P><STRONG><a name="[c2]"></a>EnLcdSpi</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd.o(i.EnLcdSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSpi
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash_POINT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[c3]"></a>EnableAllGPIOEInt</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, in_flash_manage.o(i.EnableAllGPIOEInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_World
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Page
</UL>

<P><STRONG><a name="[7d]"></a>EnableSpi</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, spi52.o(i.EnableSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ket_state
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kx023Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPowerMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnLcdSpi
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashSpi
</UL>

<P><STRONG><a name="[3cc]"></a>EraseBond</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, s132config.o(i.EraseBond))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[256]"></a>EraseBoot</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, boot.o(i.EraseBoot))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_to_new_appilacation
</UL>

<P><STRONG><a name="[c8]"></a>EraseBvkFlash</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, upfile.o(i.EraseBvkFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = EraseBvkFlash &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_FeedWdog
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Page
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showUpgredePersent
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AskPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBleUpdata
</UL>

<P><STRONG><a name="[cc]"></a>FlashQueue_CheckHead</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, queueu51822.o(i.FlashQueue_CheckHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FlashQueue_CheckHead &rArr; Flash_Erase_Page &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_EnQueue
</UL>

<P><STRONG><a name="[cd]"></a>FlashQueue_EnQueue</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, queueu51822.o(i.FlashQueue_EnQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FlashQueue_EnQueue &rArr; FlashQueue_SaveParam &rArr; Flash_Write_World &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_SaveParam
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_CheckHead
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_World
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToQueue
</UL>

<P><STRONG><a name="[cf]"></a>FlashQueue_GetTail</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, queueu51822.o(i.FlashQueue_GetTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FlashQueue_GetTail
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_IsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_api_read
</UL>

<P><STRONG><a name="[d0]"></a>FlashQueue_IsEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queueu51822.o(i.FlashQueue_IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_GetTail
</UL>

<P><STRONG><a name="[ce]"></a>FlashQueue_SaveParam</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, queueu51822.o(i.FlashQueue_SaveParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FlashQueue_SaveParam &rArr; Flash_Write_World &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_World
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_EnQueue
</UL>

<P><STRONG><a name="[56]"></a>Flash_Erase_Page</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, in_flash_manage.o(i.Flash_Erase_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Flash_Erase_Page &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAllGPIOEInt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAddr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_SaveParam
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_CheckHead
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteQueue
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromWrite
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBvkFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_all)
</UL>
<P><STRONG><a name="[55]"></a>Flash_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, in_flash_manage.o(i.Flash_ReadData))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_all)
</UL>
<P><STRONG><a name="[ca]"></a>Flash_Sector_Erase</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, ex_flash.o(i.Flash_Sector_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Flash_Sector_Erase &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashSpi
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBvkFlash
</UL>

<P><STRONG><a name="[57]"></a>Flash_Write_World</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, in_flash_manage.o(i.Flash_Write_World))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flash_Write_World &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32equel
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAllGPIOEInt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAddr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_SaveParam
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_EnQueue
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromWrite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBvkFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_all)
</UL>
<P><STRONG><a name="[321]"></a>FormatMsg</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, s132config.o(i.FormatMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FormatMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
</UL>

<P><STRONG><a name="[22]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 554 bytes, Stack size 72 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>GetData</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lis3dh_driver.o(i.GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = GetData &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetAccAxesRaw
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSpi
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccPowerOff
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSport
</UL>

<P><STRONG><a name="[e3]"></a>GetFileCrc</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, upfile.o(i.GetFileCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = GetFileCrc &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc16
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadCont
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
</UL>

<P><STRONG><a name="[147]"></a>GetHrState</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hr_app.o(i.GetHrState))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_real_time_datas
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_hr_real_time
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGetPower
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayHr
</UL>

<P><STRONG><a name="[193]"></a>GetSem</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sem.o(i.GetSem))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_ui
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_in_sleep_mode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPowerLow
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
</UL>

<P><STRONG><a name="[e6]"></a>GetSleepRecord</STRONG> (Thumb, 202 bytes, Stack size 112 bytes, protocol.o(i.GetSleepRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GetSleepRecord &rArr; ReadSleepDatas &rArr; ReadSleepItem
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSleepDatas
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_time_point
</UL>

<P><STRONG><a name="[e8]"></a>GetTimeAndSec</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp.o(i.GetTimeAndSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GetTimeAndSec &rArr; ConvertToUTCTime &rArr; GetWeek
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTime
</UL>

<P><STRONG><a name="[e9]"></a>GetVol</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, battery_adc.o(i.GetVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = GetVol &rArr; StartAdc &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdc
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePowerOn
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPower
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGetPower
</UL>

<P><STRONG><a name="[af]"></a>GetWeek</STRONG> (Thumb, 182 bytes, Stack size 36 bytes, softwarertc.o(i.GetWeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
</UL>

<P><STRONG><a name="[f2]"></a>HRS_ReadByteNAck</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iic_gpio.o(i.HRS_ReadByteNAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HRS_ReadByteNAck &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_one_clk
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadBytes
</UL>

<P><STRONG><a name="[f4]"></a>HRS_ReadBytes</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, iic_gpio.o(i.HRS_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HRS_ReadBytes &rArr; HRS_ReadByteNAck &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_SendByte
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Restart
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadByteNAck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_end
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_begin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Chkack
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_read_reg
</UL>

<P><STRONG><a name="[f8]"></a>HRS_Restart</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, iic_gpio.o(i.HRS_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HRS_Restart &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadBytes
</UL>

<P><STRONG><a name="[f6]"></a>HRS_SendByte</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iic_gpio.o(i.HRS_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HRS_SendByte &rArr; HRS_i2c_one_clk &rArr; HRS_i2c_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_one_clk
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_WriteBytes
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadBytes
</UL>

<P><STRONG><a name="[f9]"></a>HRS_WriteBytes</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, iic_gpio.o(i.HRS_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_SendByte
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_end
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_begin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Chkack
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_write_reg
</UL>

<P><STRONG><a name="[f3]"></a>HRS_i2c_one_clk</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iic_gpio.o(i.HRS_i2c_one_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HRS_i2c_one_clk &rArr; HRS_i2c_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_SendByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadByteNAck
</UL>

<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HardFault_Handler &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>HrCheckWear</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hr_app.o(i.HrCheckWear))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = HrCheckWear &rArr; ProximityDet &rArr; start_hr3300 &rArr; start_hr_bp_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProximityDet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCheckWearAndTestHr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayHr
</UL>

<P><STRONG><a name="[fe]"></a>Hrs3300_agc</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, hrs3300_alg_dynamic.o(i.Hrs3300_agc))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Hrs3300_agc &rArr; Hrs3300_alg_open &rArr; Hrs3300_normal_power &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_chip_enable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_chip_disable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_alg_open
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_normal_power
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_low_power
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_hlow_power
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_alg_send_data
</UL>

<P><STRONG><a name="[255]"></a>Hrs3300_alg_get_bp_results</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hrs3300_alg_bp.o(i.Hrs3300_alg_get_bp_results))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_presure_meas_timeout_handler
</UL>

<P><STRONG><a name="[2e1]"></a>Hrs3300_alg_get_results</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hrs3300_alg_dynamic.o(i.Hrs3300_alg_get_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hrs3300_alg_get_results
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_meas_timeout_handler
</UL>

<P><STRONG><a name="[101]"></a>Hrs3300_alg_open</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, hrs3300_alg_dynamic.o(i.Hrs3300_alg_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Hrs3300_alg_open &rArr; Hrs3300_normal_power &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_normal_power
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_agc
</UL>

<P><STRONG><a name="[105]"></a>Hrs3300_alg_send_data</STRONG> (Thumb, 4454 bytes, Stack size 232 bytes, hrs3300_alg_dynamic.o(i.Hrs3300_alg_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Hrs3300_alg_send_data &rArr; Hrs3300_agc &rArr; Hrs3300_alg_open &rArr; Hrs3300_normal_power &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_agc
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_meas_timeout_handler
</UL>

<P><STRONG><a name="[10a]"></a>Hrs3300_bp_age_fn</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, hrs3300_alg_bp.o(i.Hrs3300_bp_age_fn))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_alg_open
</UL>

<P><STRONG><a name="[108]"></a>Hrs3300_bp_alg_open</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, hrs3300_alg_bp.o(i.Hrs3300_bp_alg_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Hrs3300_bp_alg_open &rArr; Hrs3300_bp_normal_power &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_normal_power
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_age_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
</UL>

<P><STRONG><a name="[10b]"></a>Hrs3300_bp_alg_send_data</STRONG> (Thumb, 2516 bytes, Stack size 72 bytes, hrs3300_alg_bp.o(i.Hrs3300_bp_alg_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Hrs3300_bp_alg_send_data &rArr; Hrs3300_bp_con_notouch &rArr; Hrs3300_read_reg &rArr; HRS_ReadBytes &rArr; HRS_ReadByteNAck &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_low_power
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_con_notouch
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_presure_meas_timeout_handler
</UL>

<P><STRONG><a name="[10c]"></a>Hrs3300_bp_con_notouch</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, hrs3300_alg_bp.o(i.Hrs3300_bp_con_notouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Hrs3300_bp_con_notouch &rArr; Hrs3300_read_reg &rArr; HRS_ReadBytes &rArr; HRS_ReadByteNAck &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_write_reg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_alg_send_data
</UL>

<P><STRONG><a name="[10d]"></a>Hrs3300_bp_low_power</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, hrs3300_alg_bp.o(i.Hrs3300_bp_low_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Hrs3300_bp_low_power &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_alg_send_data
</UL>

<P><STRONG><a name="[109]"></a>Hrs3300_bp_normal_power</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, hrs3300_alg_bp.o(i.Hrs3300_bp_normal_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Hrs3300_bp_normal_power &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_alg_open
</UL>

<P><STRONG><a name="[ff]"></a>Hrs3300_chip_disable</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, hrs3300.o(i.Hrs3300_chip_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Hrs3300_chip_disable &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_agc
</UL>

<P><STRONG><a name="[100]"></a>Hrs3300_chip_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hrs3300.o(i.Hrs3300_chip_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Hrs3300_chip_enable &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_agc
</UL>

<P><STRONG><a name="[110]"></a>Hrs3300_chip_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hrs3300.o(i.Hrs3300_chip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Hrs3300_chip_init &rArr; Hrs3300_read_reg &rArr; HRS_ReadBytes &rArr; HRS_ReadByteNAck &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_write_reg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
</UL>

<P><STRONG><a name="[103]"></a>Hrs3300_hlow_power</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hrs3300_alg_dynamic.o(i.Hrs3300_hlow_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Hrs3300_hlow_power &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_agc
</UL>

<P><STRONG><a name="[102]"></a>Hrs3300_low_power</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, hrs3300_alg_dynamic.o(i.Hrs3300_low_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Hrs3300_low_power &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_agc
</UL>

<P><STRONG><a name="[104]"></a>Hrs3300_normal_power</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, hrs3300_alg_dynamic.o(i.Hrs3300_normal_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Hrs3300_normal_power &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_alg_open
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_agc
</UL>

<P><STRONG><a name="[111]"></a>Hrs3300_read_als</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hrs3300.o(i.Hrs3300_read_als))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Hrs3300_read_als &rArr; Hrs3300_read_reg &rArr; HRS_ReadBytes &rArr; HRS_ReadByteNAck &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_meas_timeout_handler
</UL>

<P><STRONG><a name="[112]"></a>Hrs3300_read_hrs</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hrs3300.o(i.Hrs3300_read_hrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Hrs3300_read_hrs &rArr; Hrs3300_read_reg &rArr; HRS_ReadBytes &rArr; HRS_ReadByteNAck &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProximityDet
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_meas_timeout_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_presure_meas_timeout_handler
</UL>

<P><STRONG><a name="[10f]"></a>Hrs3300_read_reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hrs3300.o(i.Hrs3300_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Hrs3300_read_reg &rArr; HRS_ReadBytes &rArr; HRS_ReadByteNAck &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_chip_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_con_notouch
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_read_als
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_read_hrs
</UL>

<P><STRONG><a name="[3c6]"></a>Hrs3300_set_exinf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hrs3300_alg_bp.o(i.Hrs3300_set_exinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hrs3300_set_exinf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
</UL>

<P><STRONG><a name="[10e]"></a>Hrs3300_write_reg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hrs3300.o(i.Hrs3300_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_chip_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_chip_enable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_chip_disable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_normal_power
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_low_power
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_con_notouch
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_normal_power
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_low_power
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_hlow_power
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_alg_send_data
</UL>

<P><STRONG><a name="[bd]"></a>InflashRead</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, in_flash_manage.o(i.InflashRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InflashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVarityOk
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromFindPosition
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEEprom
</UL>

<P><STRONG><a name="[113]"></a>InitAdc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, battery_adc.o(i.InitAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = InitAdc &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[115]"></a>InitBleUpdata</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, upfile.o(i.InitBleUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = InitBleUpdata &rArr; EraseBvkFlash &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showUpgredePersent
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBvkFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[126]"></a>InitCntStep</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pedometer_klx.o(i.InitCntStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitCntStep
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStep
</UL>

<P><STRONG><a name="[116]"></a>InitEEprom</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, in_flash_manage.o(i.InitEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = InitEEprom &rArr; IsVarityOk &rArr; InflashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVarityOk
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflashRead
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromWrite
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromSetParaToFactory
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromFindPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[118]"></a>InitExFlash</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, ex_flash.o(i.InitExFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = InitExFlash &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashSpi
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[11a]"></a>InitHeatRate</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hr_app.o(i.InitHeatRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = InitHeatRate &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[11e]"></a>InitMotor</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bsp.o(i.InitMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = InitMotor &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[120]"></a>InitPower</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, battery_adc.o(i.InitPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = InitPower &rArr; GetVol &rArr; StartAdc &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVol
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_percentage
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcVoltageLever
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[2fd]"></a>InitRfid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfid52.o(i.InitRfid))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[166]"></a>InitSleepPara</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sleep.o(i.InitSleepPara))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSleepDatas
</UL>

<P><STRONG><a name="[125]"></a>InitStep</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, pedometer_klx.o(i.InitStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitStep &rArr; InitCntStep
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCntStep
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[127]"></a>InitUiFileCrc</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, upfile.o(i.InitUiFileCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = InitUiFileCrc &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadCont
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlgBootSys
</UL>

<P><STRONG><a name="[128]"></a>IntoTestMode</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, upfile.o(i.IntoTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPack
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBvkFlash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskUpFile
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPrintfFile
</UL>

<P><STRONG><a name="[14e]"></a>IsBleConnect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, s132config.o(i.IsBleConnect))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPrintfFile
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTime
</UL>

<P><STRONG><a name="[168]"></a>IsDeepSleep</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, sleep.o(i.IsDeepSleep))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSleepDatas
</UL>

<P><STRONG><a name="[12c]"></a>IsRightBoard</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, upfile.o(i.IsRightBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IsRightBoard &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
</UL>

<P><STRONG><a name="[169]"></a>IsStartSleep</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, sleep.o(i.IsStartSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsStartSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSleepDatas
</UL>

<P><STRONG><a name="[117]"></a>IsVarityOk</STRONG> (Thumb, 58 bytes, Stack size 532 bytes, in_flash_manage.o(i.IsVarityOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = IsVarityOk &rArr; InflashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEEprom
</UL>

<P><STRONG><a name="[12e]"></a>LCD_Clear</STRONG> (Thumb, 110 bytes, Stack size 536 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = LCD_Clear &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trancs_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_spi_send
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnLcdSpi
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_key_to_power_off
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_in_sleep_mode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPowerLow
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showUpgredePersent
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTime
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySteps
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySportTime
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySleep
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayPair
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayOff
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNotice
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayK
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayHr
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayDistance
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCharge
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAlarm
</UL>

<P><STRONG><a name="[135]"></a>LCD_GPIO_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lcd.o(i.LCD_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_GPIO_Init &rArr; nrf_gpio_cfg_output
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[137]"></a>LCD_Init</STRONG> (Thumb, 710 bytes, Stack size 8 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = LCD_Init &rArr; LCD_Clear &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_Byte
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnLcdSpi
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[138]"></a>LCD_Reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd.o(i.LCD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_Reset &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[139]"></a>LCD_WR_Byte</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd.o(i.LCD_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCD_WR_Byte &rArr; lcd_spi_send &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_spi_send
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
</UL>

<P><STRONG><a name="[88]"></a>LIS3DH_FIFOModeEnable</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_FIFOModeEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_FIFOModeEnable &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>

<P><STRONG><a name="[e2]"></a>LIS3DH_GetAccAxesRaw</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_GetAccAxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_GetAccAxesRaw &rArr; LIS3DH_ReadReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
</UL>

<P><STRONG><a name="[13c]"></a>LIS3DH_GetClickResponse</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_GetClickResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_GetClickResponse &rArr; LIS3DH_ReadReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ket_state
</UL>

<P><STRONG><a name="[80]"></a>LIS3DH_GetWHO_AM_I</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lis3dh_driver.o(i.LIS3DH_GetWHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3DH_GetWHO_AM_I &rArr; LIS3DH_ReadReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>

<P><STRONG><a name="[e1]"></a>LIS3DH_ReadReg</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lis3dh_driver.o(i.LIS3DH_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LIS3DH_ReadReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kx023softInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kx023Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetWaterMark
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetODR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt1Pin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetFullScale
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetClickCFG
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetBLE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetBDU
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetAxis
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetWHO_AM_I
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetClickResponse
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetAccAxesRaw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_FIFOModeEnable
</UL>

<P><STRONG><a name="[83]"></a>LIS3DH_SetAxis</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetAxis))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_SetAxis &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>

<P><STRONG><a name="[87]"></a>LIS3DH_SetBDU</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetBDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_SetBDU &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>

<P><STRONG><a name="[86]"></a>LIS3DH_SetBLE</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetBLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_SetBLE &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>

<P><STRONG><a name="[8b]"></a>LIS3DH_SetClickCFG</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetClickCFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_SetClickCFG &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acc__EnableClickDetect
</UL>

<P><STRONG><a name="[8e]"></a>LIS3DH_SetClickLATENCY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lis3dh_driver.o(i.LIS3DH_SetClickLATENCY))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3DH_SetClickLATENCY &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acc__EnableClickDetect
</UL>

<P><STRONG><a name="[8d]"></a>LIS3DH_SetClickLIMIT</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lis3dh_driver.o(i.LIS3DH_SetClickLIMIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3DH_SetClickLIMIT &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acc__EnableClickDetect
</UL>

<P><STRONG><a name="[8c]"></a>LIS3DH_SetClickTHS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lis3dh_driver.o(i.LIS3DH_SetClickTHS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3DH_SetClickTHS &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acc__EnableClickDetect
</UL>

<P><STRONG><a name="[85]"></a>LIS3DH_SetFullScale</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_SetFullScale &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>

<P><STRONG><a name="[8f]"></a>LIS3DH_SetInt1Pin</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetInt1Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_SetInt1Pin &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acc__EnableClickDetect
</UL>

<P><STRONG><a name="[82]"></a>LIS3DH_SetMode</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_SetMode &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPowerMode
</UL>

<P><STRONG><a name="[84]"></a>LIS3DH_SetODR</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_SetODR &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>

<P><STRONG><a name="[89]"></a>LIS3DH_SetWaterMark</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3DH_SetWaterMark &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>

<P><STRONG><a name="[13b]"></a>LIS3DH_WriteReg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lis3dh_driver.o(i.LIS3DH_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kx023softInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kx023Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetWaterMark
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetODR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt1Pin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetFullScale
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetClickTHS
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetClickLIMIT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetClickLATENCY
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetClickCFG
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetBLE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetBDU
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetAxis
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_FIFOModeEnable
</UL>

<P><STRONG><a name="[10]"></a>LcdDisplayAlarm</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ui_app.o(i.LcdDisplayAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = LcdDisplayAlarm &rArr; lcd_show_alarm &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorOn
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_battery
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_alarm
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>LcdDisplayBlood</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ui_app.o(i.LcdDisplayBlood))
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>LcdDisplayCharge</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ui_app.o(i.LcdDisplayCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = LcdDisplayCharge &rArr; lcd_show_battery_charging &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_battery_charging
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>LcdDisplayDistance</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, ui_app.o(i.LcdDisplayDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = LcdDisplayDistance &rArr; lcd_show_distance &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_distance
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_jump_index
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>LcdDisplayHr</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, ui_app.o(i.LcdDisplayHr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = LcdDisplayHr &rArr; lcd_show_HR &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HrCheckWear
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorOn
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHrState
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_HR
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHeatRate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_jump_index
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>LcdDisplayK</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ui_app.o(i.LcdDisplayK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = LcdDisplayK &rArr; lcd_show_K &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_K
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_jump_index
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>LcdDisplayNotice</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ui_app.o(i.LcdDisplayNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = LcdDisplayNotice &rArr; LcdShowNotice &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorOn
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdShowNotice
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>LcdDisplayOff</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, ui_app.o(i.LcdDisplayOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = LcdDisplayOff &rArr; LCD_Clear &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_key_to_power_off
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_in_sleep_mode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>LcdDisplayPair</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ui_app.o(i.LcdDisplayPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = LcdDisplayPair &rArr; lcd_show_pair &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_pair
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_jump_index
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>LcdDisplaySleep</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ui_app.o(i.LcdDisplaySleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = LcdDisplaySleep &rArr; lcd_show_sleep &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_sleep
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_jump_index
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>LcdDisplaySportTime</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ui_app.o(i.LcdDisplaySportTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = LcdDisplaySportTime &rArr; lcd_show_sport_time &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_sport_time
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_jump_index
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>LcdDisplaySteps</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ui_app.o(i.LcdDisplaySteps))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = LcdDisplaySteps &rArr; lcd_show_step &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_step
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_jump_index
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>LcdDisplayTime</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, ui_app.o(i.LcdDisplayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = LcdDisplayTime &rArr; lcd_show_time &rArr; Displayhhmm &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBleConnect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAndSec
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_time
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_jump_index
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_app.o(.data)
</UL>
<P><STRONG><a name="[149]"></a>LcdShowNotice</STRONG> (Thumb, 112 bytes, Stack size 88 bytes, ui_support.o(i.LcdShowNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = LcdShowNotice &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNotice
</UL>

<P><STRONG><a name="[151]"></a>LowerPower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.LowerPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LowerPower &rArr; power_manage &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_FeedWdog
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePowerOn
</UL>

<P><STRONG><a name="[153]"></a>ManagePowerOn</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, bsp.o(i.ManagePowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = ManagePowerOn &rArr; wait_key_to_power_off &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteQueue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromAnsy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromSetParaToFactory
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_key_to_power_off
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sleep_flash
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_in_sleep_mode
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charger_status
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVol
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_key_to_power_on
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowerPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[13e]"></a>MotorOn</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bsp.o(i.MotorOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = MotorOn &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPowerLow
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNotice
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayHr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAlarm
</UL>

<P><STRONG><a name="[15b]"></a>NoticeCloseHr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hr_app.o(i.NoticeCloseHr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = NoticeCloseHr &rArr; StartHeatRate &rArr; start_hr3300 &rArr; start_hr_bp_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHeatRate
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_ui
</UL>

<P><STRONG><a name="[15c]"></a>Nrf51Config</STRONG> (Thumb, 340 bytes, Stack size 20 bytes, rfid52.o(i.Nrf51Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Nrf51Config &rArr; SB
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf51Config_FUN
</UL>

<P><STRONG><a name="[ab]"></a>Nrf51Config_FUN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, rfid52.o(i.Nrf51Config_FUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Nrf51Config_FUN &rArr; Nrf51Config &rArr; SB
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOn
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf51Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToRfid
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
</UL>

<P><STRONG><a name="[aa]"></a>Open32768</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rfid52.o(i.Open32768))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToRfid
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[16a]"></a>Open_HFCLK</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfid52.o(i.Open_HFCLK))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOn
</UL>

<P><STRONG><a name="[1c]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>Printfdata</STRONG> (Thumb, 200 bytes, Stack size 128 bytes, ui_support.o(i.Printfdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showUpgredePersent
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayhhmm
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNumber
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMonthDay
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_version
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_step
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_sport_time
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_pair
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_distance
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_battery
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_alarm
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_K
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_HR
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdShowNotice
</UL>

<P><STRONG><a name="[fd]"></a>ProximityDet</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hr_app.o(i.ProximityDet))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ProximityDet &rArr; start_hr3300 &rArr; start_hr_bp_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadProx
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_read_hrs
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HrCheckWear
</UL>

<P><STRONG><a name="[1d]"></a>RADIO_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rfid52.o(i.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RADIO_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[163]"></a>ReadProx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, in_flash_manage.o(i.ReadProx))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProximityDet
</UL>

<P><STRONG><a name="[e7]"></a>ReadSleepDatas</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, sleep.o(i.ReadSleepDatas))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReadSleepDatas &rArr; ReadSleepItem
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStartSleep
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDeepSleep
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSleepPara
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSleepItem
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWriteAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepRecord
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepIndex
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSleepRecord
</UL>

<P><STRONG><a name="[1ae]"></a>ReadWearFlg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hr_app.o(i.ReadWearFlg))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCheckWearAndTestHr
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDateInMin
</UL>

<P><STRONG><a name="[4a]"></a>RevRfDataRecall</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, upfile.o(i.RevRfDataRecall))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RevRfDataRecall &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 3]<UL><LI> upfile.o(i.TaskBleUpfile)
<LI> upfile.o(i.TaskPrintfFile)
<LI> upfile.o(i.TaskUpFile)
</UL>
<P><STRONG><a name="[ac]"></a>RfOn</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rfid52.o(i.RfOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RfOn
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_HFCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToRfid
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf51Config_FUN
</UL>

<P><STRONG><a name="[4b]"></a>RfRevFileRecall</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, upfile.o(i.RfRevFileRecall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RfRevFileRecall &rArr; CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> upfile.o(i.TaskP24UpdataFile)
</UL>
<P><STRONG><a name="[16b]"></a>RfRevFileSendResult</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, upfile.o(i.RfRevFileSendResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RfRevFileSendResult &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemEmpty
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTx
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
</UL>

<P><STRONG><a name="[93]"></a>RfTx</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rfid52.o(i.RfTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RfTx &rArr; RfTxOnly
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTxOnly
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPrintfFile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPack
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRevFileSendResult
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AskPacket
</UL>

<P><STRONG><a name="[16c]"></a>RfTxOnly</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, rfid52.o(i.RfTxOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RfTxOnly
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTx
</UL>

<P><STRONG><a name="[16d]"></a>RfWritePacket</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, upfile.o(i.RfWritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = RfWritePacket &rArr; WriteBvkFlash &rArr; SPI_FLASH_WriteCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBvkFlash
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AskPacket
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
</UL>

<P><STRONG><a name="[16f]"></a>RtcTimeInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp.o(i.RtcTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RtcTimeInit &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[23]"></a>SAADC_IRQHandler</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, nrf_drv_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SAADC_IRQHandler &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>SB</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfid52.o(i.SB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SB
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf51Config
</UL>

<P><STRONG><a name="[174]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[176]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[178]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[97]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, segger_rtt_printf.o(i.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ket_state
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSport
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showUpgredePersent
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlgBootSys
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRevFileSendResult
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileCrc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBvkFlash
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AskPair
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_print
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_data_in
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProximityDet
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTime
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayOff
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayHr
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_meas_timeout_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_presure_meas_timeout_handler
</UL>

<P><STRONG><a name="[17d]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 522 bytes, Stack size 72 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[1f]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler_spi &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler &rArr; irq_handler_spi &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>SPI_FLASH_ReadCont</STRONG> (Thumb, 152 bytes, Stack size 184 bytes, ex_flash.o(i.SPI_FLASH_ReadCont))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashSpi
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUiFileCrc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileCrc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash_POINT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
</UL>

<P><STRONG><a name="[d7]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ex_flash.o(i.SPI_FLASH_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; SpiSend &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteCont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
</UL>

<P><STRONG><a name="[182]"></a>SPI_FLASH_WriteCont</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ex_flash.o(i.SPI_FLASH_WriteCont))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = SPI_FLASH_WriteCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEn
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashSpi
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlgBootSys
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBvkFlash
</UL>

<P><STRONG><a name="[30]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, softdevice_handler.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>SemEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sem.o(i.SemEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRevFileSendResult
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendResult
</UL>

<P><STRONG><a name="[185]"></a>SendAlarm</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, protocol.o(i.SendAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendAlarm &rArr; BleWriteData &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[186]"></a>SendItems</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, protocol.o(i.SendItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = SendItems &rArr; ble_send_history_step &rArr; ble_send_wait_to_success &rArr; task_ui &rArr; task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_history_step
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_current_step
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[189]"></a>SendMsg</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, protocol.o(i.SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
</UL>

<P><STRONG><a name="[12a]"></a>SendPack</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, upfile.o(i.SendPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendPack &rArr; RfTx &rArr; RfTxOnly
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTx
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
</UL>

<P><STRONG><a name="[18a]"></a>SendPower20Notice</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, alarm.o(i.SendPower20Notice))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendPower20Notice
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGetPower
</UL>

<P><STRONG><a name="[18b]"></a>SendSedentaryNotice</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, alarm.o(i.SendSedentaryNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendSedentaryNotice
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSendentaryCheck
</UL>

<P><STRONG><a name="[7b]"></a>SendSem</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sem.o(i.SendSem))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_charge_statues
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_hr_real_time
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGetPower
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskAlarmCheck
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_event_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_time_event_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccForLcdOnOff
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timeout_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPower20Notice
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRevFileSendResult
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendResult
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSedentaryNotice
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_click_irq
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_data_in
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time_event_handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayOff
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayHr
</UL>

<P><STRONG><a name="[18c]"></a>SendSleepIndex</STRONG> (Thumb, 474 bytes, Stack size 120 bytes, protocol.o(i.SendSleepIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SendSleepIndex &rArr; ReadSleepDatas &rArr; ReadSleepItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleWriteData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSleepDatas
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_time_point
</UL>

<P><STRONG><a name="[18d]"></a>SendSleepRecord</STRONG> (Thumb, 382 bytes, Stack size 128 bytes, protocol.o(i.SendSleepRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SendSleepRecord &rArr; ReadSleepDatas &rArr; ReadSleepItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleWriteData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSleepDatas
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_time_point
</UL>

<P><STRONG><a name="[18e]"></a>SetAccPowerOff</STRONG> (Thumb, 64 bytes, Stack size 200 bytes, lis3dh_driver.o(i.SetAccPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SetAccPowerOff &rArr; GetData &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kx023Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[3c9]"></a>SetBandPara</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, protocol.o(i.SetBandPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetBandPara
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[3ca]"></a>SetBandParaAlarm</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, protocol.o(i.SetBandParaAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetBandParaAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[3cb]"></a>SetBandParaAlarm_new</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, protocol.o(i.SetBandParaAlarm_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetBandParaAlarm_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[3cd]"></a>SetBandParaSendentary</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, protocol.o(i.SetBandParaSendentary))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetBandParaSendentary
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[190]"></a>SetHighSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, protocol.o(i.SetHighSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SetHighSpeed &rArr; ChangeToHightSpeed &rArr; conn_params_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToHightSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[18f]"></a>SetPowerMode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lis3dh_driver.o(i.SetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SetPowerMode &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetMode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSpi
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccPowerOff
</UL>

<P><STRONG><a name="[164]"></a>SetRssi</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfid52.o(i.SetRssi))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
</UL>

<P><STRONG><a name="[3ce]"></a>SetSendentarypara</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, protocol.o(i.SetSendentarypara))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSendentarypara
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[191]"></a>SetTime</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, protocol.o(i.SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SetTime &rArr; ConvertToUTCTime &rArr; GetWeek
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_time_to_Second
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[b9]"></a>ShowIcon</STRONG> (Thumb, 336 bytes, Stack size 592 bytes, lcd.o(i.ShowIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trancs_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_spi_send
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnLcdSpi
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showUpgredePersent
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayhhmm
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMonthDay
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_time
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_sport_time
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_sleep
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_distance
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_alarm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_HR
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
</UL>

<P><STRONG><a name="[192]"></a>ShowPowerLow</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ui_app.o(i.ShowPowerLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = ShowPowerLow &rArr; lcd_show_battery_charging &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorOn
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSem
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_battery_charging
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
</UL>

<P><STRONG><a name="[2fb]"></a>SleepInit</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sleep.o(i.SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SleepInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[119]"></a>SpiSend</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ex_flash.o(i.SpiSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SpiSend &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExFlash
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteCont
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashSpi
</UL>

<P><STRONG><a name="[194]"></a>SportsProcess</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, pedometer_klx.o(i.SportsProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SportsProcess &rArr; step_counter &rArr; Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSport
</UL>

<P><STRONG><a name="[ea]"></a>StartAdc</STRONG> (Thumb, 120 bytes, Stack size 232 bytes, battery_adc.o(i.StartAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = StartAdc &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_sample
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVol
</UL>

<P><STRONG><a name="[199]"></a>StartAdv</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, s132config.o(i.StartAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = StartAdv &rArr; advertising_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[146]"></a>StartHeatRate</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, hr_app.o(i.StartHeatRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = StartHeatRate &rArr; start_hr3300 &rArr; start_hr_bp_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_hr_or_redetect
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskAutoDetectHeartRate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoticeCloseHr
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayHr
</UL>

<P><STRONG><a name="[1a5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[42]"></a>SystemInit</STRONG> (Thumb, 532 bytes, Stack size 8 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_57
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_37
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_32
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_31
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_16
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_12
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_108
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>TFT_ShowBmp_Flash</STRONG> (Thumb, 174 bytes, Stack size 568 bytes, lcd.o(i.TFT_ShowBmp_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadCont
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trancs_data
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_swap_buf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_spi_send
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnLcdSpi
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAnaTime
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_step
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_sport_time
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_pair
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_distance
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_battery_charging
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_battery
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_alarm
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_K
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_HR
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdShowNotice
</UL>

<P><STRONG><a name="[b5]"></a>TFT_ShowBmp_Flash_POINT</STRONG> (Thumb, 248 bytes, Stack size 584 bytes, lcd.o(i.TFT_ShowBmp_Flash_POINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = TFT_ShowBmp_Flash_POINT &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadCont
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnLcdSpi
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAnaTime
</UL>

<P><STRONG><a name="[1a7]"></a>TaskAlarmCheck</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, alarm.o(i.TaskAlarmCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TaskAlarmCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDateInMin
</UL>

<P><STRONG><a name="[1a8]"></a>TaskAutoDetectHeartRate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, hr_app.o(i.TaskAutoDetectHeartRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = TaskAutoDetectHeartRate &rArr; StartHeatRate &rArr; start_hr3300 &rArr; start_hr_bp_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHeatRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCheckWearAndTestHr
</UL>

<P><STRONG><a name="[1a9]"></a>TaskBleUpfile</STRONG> (Thumb, 466 bytes, Stack size 312 bytes, upfile.o(i.TaskBleUpfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = TaskBleUpfile &rArr; task_and_ble_data &rArr; TestPrintfaddr &rArr; TaskPrintfFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_escape_ms
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_FeedWdog
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToRfid
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showUpgredePersent
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlgBootSys
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBvkFlash
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRightBoard
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileCrc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleSendResult
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleAskPacket
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>TaskCheckWearAndTestHr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hr_app.o(i.TaskCheckWearAndTestHr))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = TaskCheckWearAndTestHr &rArr; TaskAutoDetectHeartRate &rArr; StartHeatRate &rArr; start_hr3300 &rArr; start_hr_bp_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HrCheckWear
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWearFlg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskAutoDetectHeartRate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDateInMin
</UL>

<P><STRONG><a name="[1af]"></a>TaskGetPower</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, battery_adc.o(i.TaskGetPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = TaskGetPower &rArr; GetVol &rArr; StartAdc &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVol
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPower20Notice
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHrState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_percentage
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcVoltageLever
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDateInMin
</UL>

<P><STRONG><a name="[12b]"></a>TaskP24UpdataFile</STRONG> (Thumb, 524 bytes, Stack size 336 bytes, upfile.o(i.TaskP24UpdataFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_escape_ms
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_FeedWdog
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemEmpty
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showUpgredePersent
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlgBootSys
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfWritePacket
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRevFileSendResult
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRightBoard
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileCrc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AskPacket
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf51Config_FUN
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
</UL>

<P><STRONG><a name="[1b0]"></a>TaskPrintfFile</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, upfile.o(i.TaskPrintfFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = TaskPrintfFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToRfid
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBleConnect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTx
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintfaddr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintfSleep
</UL>

<P><STRONG><a name="[1b1]"></a>TaskSendentaryCheck</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, alarm.o(i.TaskSendentaryCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TaskSendentaryCheck &rArr; check_in_sedentary
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_in_sedentary
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSedentaryNotice
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDateInMin
</UL>

<P><STRONG><a name="[1b3]"></a>TaskSleep</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, sleep.o(i.TaskSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TaskSleep &rArr; CheckErase
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckErase
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWriteAddr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteWearFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDateInMin
</UL>

<P><STRONG><a name="[1b5]"></a>TaskSport</STRONG> (Thumb, 214 bytes, Stack size 160 bytes, bsp.o(i.TaskSport))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = TaskSport &rArr; GetData &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SportsProcess
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallByGsensor
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccForLcdOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
</UL>

<P><STRONG><a name="[1b6]"></a>TaskUpFile</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, upfile.o(i.TaskUpFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToRfid
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
</UL>

<P><STRONG><a name="[1b8]"></a>TestPrintfSleep</STRONG> (Thumb, 218 bytes, Stack size 160 bytes, sleep.o(i.TestPrintfSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = TestPrintfSleep &rArr; TaskPrintfFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_FeedWdog
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPrintfFile
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSleepItem
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWriteAddr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[1b9]"></a>TestPrintfaddr</STRONG> (Thumb, 524 bytes, Stack size 208 bytes, sleep.o(i.TestPrintfaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = TestPrintfaddr &rArr; TaskPrintfFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_FeedWdog
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPrintfFile
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[1e]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>V_FeedWdog</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wdt.o(i.V_FeedWdog))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_wait_to_success
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_InitWdt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowerPower
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBvkFlash
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintfaddr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintfSleep
</UL>

<P><STRONG><a name="[1bc]"></a>V_InitWdt</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, wdt.o(i.V_InitWdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = V_InitWdt
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_FeedWdog
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[16e]"></a>WriteBvkFlash</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, upfile.o(i.WriteBvkFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = WriteBvkFlash &rArr; SPI_FLASH_WriteCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_World
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteCont
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfWritePacket
</UL>

<P><STRONG><a name="[1bd]"></a>WriteDataToQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queueu51822.o(i.WriteDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WriteDataToQueue &rArr; FlashQueue_EnQueue &rArr; FlashQueue_SaveParam &rArr; Flash_Write_World &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_EnQueue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_api_write
</UL>

<P><STRONG><a name="[d3]"></a>WriteEn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ex_flash.o(i.WriteEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WriteEn &rArr; SpiSend &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteCont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
</UL>

<P><STRONG><a name="[1ab]"></a>WriteFlgBootSys</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, upfile.o(i.WriteFlgBootSys))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = WriteFlgBootSys &rArr; InitUiFileCrc &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromAnsy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_to_new_appilacation
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUiFileCrc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteCont
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
</UL>

<P><STRONG><a name="[1bf]"></a>WriteHeatRate</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, hr_app.o(i.WriteHeatRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WriteHeatRate &rArr; usr_api_write &rArr; WriteDataToQueue &rArr; FlashQueue_EnQueue &rArr; FlashQueue_SaveParam &rArr; Flash_Write_World &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_api_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_hr_or_redetect
</UL>

<P><STRONG><a name="[1c2]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3fa]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[b7]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showUpgredePersent
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintfaddr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintfSleep
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayhhmm
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNumber
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMonthDay
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_version
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_sport_time
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_pair
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_distance
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_battery
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_alarm
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_K
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_HR
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySteps
</UL>

<P><STRONG><a name="[106]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_alg_send_data
</UL>

<P><STRONG><a name="[3fb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3fc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3fd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c4]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[44]"></a>acc_click_irq</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, lis3dh_driver.o(i.acc_click_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = acc_click_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3dh_driver.o(i.Acc__EnableClickDetect)
</UL>
<P><STRONG><a name="[54]"></a>acc_time_event_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(i.acc_time_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = acc_time_event_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.init_acc_time)
</UL>
<P><STRONG><a name="[1c7]"></a>addr_compare</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, id_manager.o(i.addr_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[1ca]"></a>adv_data_encode</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[1d8]"></a>ah</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, id_manager.o(i.ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ah
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
</UL>

<P><STRONG><a name="[1d9]"></a>ana_step_datas_in_500ms</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, bsp.o(i.ana_step_datas_in_500ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ana_step_datas_in_500ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_step_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
</UL>

<P><STRONG><a name="[1db]"></a>ana_time_point</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, protocol.o(i.ana_time_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = ana_time_point &rArr; usr_api_read &rArr; data_use_packet_data &rArr; ble_send_hr &rArr; ble_send_wait_to_success &rArr; task_ui &rArr; task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_api_read
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_time_to_Second
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_history_items
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSleepRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[1de]"></a>ancs_parse_get_attrs_response</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ancs_attr_parser.o(i.ancs_parse_get_attrs_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ancs_parse_get_attrs_response &rArr; attr_skip &rArr; attr_is_requested
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_uid_parse
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_id_parse
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_skip
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_len2_parse
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_len1_parse
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_id_parse
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_data_parse
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_id_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_evt_gattc_notif
</UL>

<P><STRONG><a name="[1e7]"></a>app_error_fault_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_error_fault_handler &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[96]"></a>app_error_handler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, bsp.o(i.app_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromAnsy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_acc_time
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ui_time
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acc_time
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTimeInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHeatRate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPowerLow
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process_if_change_day
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorOn
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_callback
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlgBootSys
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AskPair
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_nus_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_bonds
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_discovery_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_setup
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_error_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSpi
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr_bp_time
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
</UL>

<P><STRONG><a name="[11b]"></a>app_timer_create</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ui_time
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acc_time
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTimeInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHeatRate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[1e8]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_init &rArr; rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[159]"></a>app_timer_start</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_acc_time
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTimeInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorOn
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr_bp_time
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
</UL>

<P><STRONG><a name="[15a]"></a>app_timer_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_acc_time
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorOn
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr_bp_time
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
</UL>

<P><STRONG><a name="[177]"></a>app_util_critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[179]"></a>app_util_critical_region_exit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[209]"></a>ble_advdata_set</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srdata_check
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advdata_check
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[1d7]"></a>ble_advertising_init</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[20c]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_advertising_on_ble_evt &rArr; on_timeout &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[210]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[19b]"></a>ble_advertising_start</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed_slow
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdv
</UL>

<P><STRONG><a name="[34b]"></a>ble_advertising_whitelist_reply</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ble_advertising.o(i.ble_advertising_whitelist_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_advertising_whitelist_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[1f6]"></a>ble_ancs_c_data_source_notif_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_ble_ancs_c.o(i.ble_ancs_c_data_source_notif_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_ancs_c_data_source_notif_enable &rArr; cccd_configure &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_setup
</UL>

<P><STRONG><a name="[217]"></a>ble_ancs_c_init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, nrf_ble_ancs_c.o(i.ble_ancs_c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_ancs_c_init &rArr; ble_db_discovery_evt_register &rArr; registered_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_evt_register
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[1f5]"></a>ble_ancs_c_notif_source_notif_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_ble_ancs_c.o(i.ble_ancs_c_notif_source_notif_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_ancs_c_notif_source_notif_enable &rArr; cccd_configure &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_setup
</UL>

<P><STRONG><a name="[21a]"></a>ble_ancs_c_on_ble_evt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_ble_ancs_c.o(i.ble_ancs_c_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_ancs_c_on_ble_evt &rArr; on_evt_gattc_notif &rArr; parse_notif
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write_rsp
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_evt_gattc_notif
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[26f]"></a>ble_ancs_c_on_db_disc_evt</STRONG> (Thumb, 238 bytes, Stack size 136 bytes, nrf_ble_ancs_c.o(i.ble_ancs_c_on_db_disc_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_ancs_c_on_db_disc_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_disc_handler
</UL>

<P><STRONG><a name="[21e]"></a>ble_ancs_get_notif_attrs</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, nrf_ble_ancs_c.o(i.ble_ancs_get_notif_attrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_ancs_get_notif_attrs &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_insert
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_encode
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_ancs_c_request_attrs
</UL>

<P><STRONG><a name="[222]"></a>ble_conn_params_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[223]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[228]"></a>ble_conn_params_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_conn_params_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
</UL>

<P><STRONG><a name="[1fa]"></a>ble_conn_state_conn_handles</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_handles))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_conn_state_conn_handles &rArr; sdk_mapped_flags_key_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>

<P><STRONG><a name="[22a]"></a>ble_conn_state_encrypted</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_encrypted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_encrypted &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
</UL>

<P><STRONG><a name="[22c]"></a>ble_conn_state_mitm_protected</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_mitm_protected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_mitm_protected &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
</UL>

<P><STRONG><a name="[22d]"></a>ble_conn_state_on_ble_evt</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_conn_state_on_ble_evt &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[203]"></a>ble_conn_state_role</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_conn_state_role &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[232]"></a>ble_conn_state_status</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_conn_state.o(i.ble_conn_state_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_conn_state_status &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
</UL>

<P><STRONG><a name="[233]"></a>ble_conn_state_user_flag_acquire</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[1f8]"></a>ble_conn_state_user_flag_collection</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_collection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_user_flag_collection
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>

<P><STRONG><a name="[1fb]"></a>ble_conn_state_user_flag_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
</UL>

<P><STRONG><a name="[205]"></a>ble_conn_state_user_flag_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_config_reply
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
</UL>

<P><STRONG><a name="[219]"></a>ble_db_discovery_evt_register</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_db_discovery.o(i.ble_db_discovery_evt_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_db_discovery_evt_register &rArr; registered_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_set
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_init
</UL>

<P><STRONG><a name="[271]"></a>ble_db_discovery_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_db_discovery.o(i.ble_db_discovery_init))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_discovery_init
</UL>

<P><STRONG><a name="[237]"></a>ble_db_discovery_on_ble_evt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ble_db_discovery.o(i.ble_db_discovery_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_db_discovery_on_ble_evt &rArr; on_characteristic_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[390]"></a>ble_db_discovery_start</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ble_db_discovery.o(i.ble_db_discovery_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_db_discovery_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[240]"></a>ble_nus_init</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_nus_init
</UL>

<P><STRONG><a name="[23d]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[a2]"></a>ble_nus_string_send</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ble_data
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleWriteData
</UL>

<P><STRONG><a name="[187]"></a>ble_send_current_step</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, data_use_api.o(i.ble_send_current_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = ble_send_current_step &rArr; ble_send_wait_to_success &rArr; task_ui &rArr; task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_wait_to_success
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_time_point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItems
</UL>

<P><STRONG><a name="[188]"></a>ble_send_history_step</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, data_use_api.o(i.ble_send_history_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = ble_send_history_step &rArr; ble_send_wait_to_success &rArr; task_ui &rArr; task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_wait_to_success
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_time_point
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItems
</UL>

<P><STRONG><a name="[247]"></a>ble_send_hr</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, data_use_api.o(i.ble_send_hr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = ble_send_hr &rArr; ble_send_wait_to_success &rArr; task_ui &rArr; task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_wait_to_success
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_use_packet_data
</UL>

<P><STRONG><a name="[248]"></a>ble_send_step</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, data_use_api.o(i.ble_send_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = ble_send_step &rArr; ble_send_wait_to_success &rArr; task_ui &rArr; task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_wait_to_success
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_use_packet_data
</UL>

<P><STRONG><a name="[246]"></a>ble_send_wait_to_success</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, data_use_api.o(i.ble_send_wait_to_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = ble_send_wait_to_success &rArr; task_ui &rArr; task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ble_data
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ble_tx_enable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_escape_ms
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_ui
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_FeedWdog
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_step
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_hr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_history_step
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_current_step
</UL>

<P><STRONG><a name="[24c]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[254]"></a>blood_presure_meas_timeout_handler</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, hrs3300.o(i.blood_presure_meas_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = blood_presure_meas_timeout_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_alg_send_data
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_alg_get_bp_results
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_read_hrs
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_bp_event_handler
</UL>

<P><STRONG><a name="[1be]"></a>boot_to_new_appilacation</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, boot.o(i.boot_to_new_appilacation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = boot_to_new_appilacation
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_nvic_word_write
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBoot
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlgBootSys
</UL>

<P><STRONG><a name="[1]"></a>button_event_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.button_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.data)
</UL>
<P><STRONG><a name="[123]"></a>cal_percentage</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, battery_adc.o(i.cal_percentage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cal_percentage &rArr; charger_status
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charger_status
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPower
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGetPower
</UL>

<P><STRONG><a name="[1da]"></a>calc_step_time</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bsp.o(i.calc_step_time))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_step_datas_in_500ms
</UL>

<P><STRONG><a name="[156]"></a>charger_status</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, battery_adc.o(i.charger_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = charger_status
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePowerOn
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_charge_statues
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_in_sleep_mode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_percentage
</UL>

<P><STRONG><a name="[1b2]"></a>check_in_sedentary</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, alarm.o(i.check_in_sedentary))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_in_sedentary
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_hour_min
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSendentaryCheck
</UL>

<P><STRONG><a name="[259]"></a>check_send_hr_real_time</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, protocol.o(i.check_send_hr_real_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_send_hr_real_time
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHrState
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
</UL>

<P><STRONG><a name="[358]"></a>chunk_queue_next</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_next))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
</UL>

<P><STRONG><a name="[25f]"></a>close_all_gpio</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, s132config.o(i.close_all_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = close_all_gpio &rArr; nrf_gpio_cfg_output
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[a8]"></a>conn_params_negotiation</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToHightSpeed
</UL>

<P><STRONG><a name="[bf]"></a>convert_time_to_Second</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, softwarertc.o(i.convert_time_to_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = convert_time_to_Second
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monthLength
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_history
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromSetParaToFactory
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_history_data_same_to_today
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_time_point
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
</UL>

<P><STRONG><a name="[26b]"></a>data_process_if_change_day</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, bsp.o(i.data_process_if_change_day))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = data_process_if_change_day &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_history
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromAnsy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_history_data_same_to_today
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDateInMin
</UL>

<P><STRONG><a name="[26e]"></a>data_use_packet_data</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, data_use_api.o(i.data_use_packet_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = data_use_packet_data &rArr; ble_send_hr &rArr; ble_send_wait_to_success &rArr; task_ui &rArr; task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_step
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_hr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_api_read
</UL>

<P><STRONG><a name="[58]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, utility.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_SaveParam
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_CheckHead
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteQueue
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPower
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExFlash
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_World
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Page
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_key_to_power_off
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdc
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlgBootSys
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleWriteData
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_setup
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kx023softInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kx023Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHighSpeed
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProximityDet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_all)
</UL>
<P><STRONG><a name="[fa]"></a>delay_us</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, utility.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExFlash
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteCont
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRevFileSendResult
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashSpi
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_udelay
</UL>

<P><STRONG><a name="[26d]"></a>delete_history_data_same_to_today</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bsp.o(i.delete_history_data_same_to_today))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delete_history_data_same_to_today &rArr; convert_time_to_Second
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_time_to_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process_if_change_day
</UL>

<P><STRONG><a name="[154]"></a>display_in_sleep_mode</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ui_app.o(i.display_in_sleep_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = display_in_sleep_mode &rArr; lcd_show_battery_charging &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charger_status
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDateInMin
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSem
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_battery_charging
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayOff
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePowerOn
</UL>

<P><STRONG><a name="[158]"></a>erase_sleep_flash</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sleep.o(i.erase_sleep_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = erase_sleep_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePowerOn
</UL>

<P><STRONG><a name="[287]"></a>fds_file_delete</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, fds.o(i.fds_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[28b]"></a>fds_gc</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, fds.o(i.fds_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fds_gc &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[28c]"></a>fds_init</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, fds.o(i.fds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fds_init &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[292]"></a>fds_record_close</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_close &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>

<P><STRONG><a name="[294]"></a>fds_record_find</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, fds.o(i.fds_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[296]"></a>fds_record_find_by_key</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fds.o(i.fds_record_find_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>

<P><STRONG><a name="[297]"></a>fds_record_find_in_file</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fds.o(i.fds_record_find_in_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find_in_file &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[380]"></a>fds_record_id_from_desc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.fds_record_id_from_desc))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[298]"></a>fds_record_open</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>

<P><STRONG><a name="[299]"></a>fds_record_update</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[29b]"></a>fds_record_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[29c]"></a>fds_record_write_reserved</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fds.o(i.fds_record_write_reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[377]"></a>fds_register</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.fds_register))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[29d]"></a>fds_reserve</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fds.o(i.fds_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>

<P><STRONG><a name="[29f]"></a>fds_reserve_cancel</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fds.o(i.fds_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fds_reserve_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[257]"></a>flash_nvic_word_write</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, boot.o(i.flash_nvic_word_write))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_to_new_appilacation
</UL>

<P><STRONG><a name="[2a8]"></a>fs_erase</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fstorage.o(i.fs_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[28f]"></a>fs_init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, fstorage.o(i.fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flash_page_end_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[2a7]"></a>fs_queued_op_count_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fstorage.o(i.fs_queued_op_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[2ae]"></a>fs_store</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, fstorage.o(i.fs_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[2af]"></a>fs_sys_event_handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fstorage.o(i.fs_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fs_sys_event_handler &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[2c5]"></a>gcm_ble_evt_handler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gcm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = gcm_ble_evt_handler &rArr; update_pending_flags_check &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_written
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
</UL>

<P><STRONG><a name="[2]"></a>gcm_gscm_evt_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gcm_gscm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = gcm_gscm_evt_handler &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatts_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>gcm_im_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gcm_im_evt_handler &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[2ce]"></a>gcm_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcm_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[2d0]"></a>gcm_local_database_has_changed</STRONG> (Thumb, 70 bytes, Stack size 80 bytes, gatt_cache_manager.o(i.gcm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = gcm_local_database_has_changed &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
</UL>

<P><STRONG><a name="[6a]"></a>gcm_smd_evt_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = gcm_smd_evt_handler &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[2e0]"></a>get_acc_data</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp.o(i.get_acc_data))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_meas_timeout_handler
</UL>

<P><STRONG><a name="[2d2]"></a>get_connection_by_conn_handle</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, id_manager.o(i.get_connection_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>

<P><STRONG><a name="[2d3]"></a>get_free_connection</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, id_manager.o(i.get_free_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_free_connection &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
</UL>

<P><STRONG><a name="[129]"></a>get_mac</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, s132config.o(i.get_mac))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntoTestMode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_pair
</UL>

<P><STRONG><a name="[1ac]"></a>get_time_escape_ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_timer.o(i.get_time_escape_ms))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_wait_to_success
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_key_to_power_off
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
</UL>

<P><STRONG><a name="[2c6]"></a>gscm_db_change_notification_done</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_db_change_notification_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[2d5]"></a>gscm_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatts_cache_manager.o(i.gscm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gscm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[2d1]"></a>gscm_local_database_has_changed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gatts_cache_manager.o(i.gscm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = gscm_local_database_has_changed &rArr; service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>

<P><STRONG><a name="[2d9]"></a>gscm_local_db_cache_apply</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[2db]"></a>gscm_local_db_cache_update</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>

<P><STRONG><a name="[68]"></a>gscm_pdb_evt_handler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = gscm_pdb_evt_handler &rArr; service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[2cd]"></a>gscm_service_changed_ind_needed</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gscm_service_changed_ind_needed &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[3bd]"></a>gscm_service_changed_ind_send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gscm_service_changed_ind_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[2df]"></a>heart_rate_meas_timeout_handler</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, hrs3300.o(i.heart_rate_meas_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = heart_rate_meas_timeout_handler &rArr; Hrs3300_alg_send_data &rArr; Hrs3300_agc &rArr; Hrs3300_alg_open &rArr; Hrs3300_normal_power &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acc_data
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_alg_send_data
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_alg_get_results
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_read_als
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_read_hrs
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_bp_event_handler
</UL>

<P><STRONG><a name="[47]"></a>hr_bp_event_handler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hr_app.o(i.hr_bp_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = hr_bp_event_handler &rArr; heart_rate_meas_timeout_handler &rArr; Hrs3300_alg_send_data &rArr; Hrs3300_agc &rArr; Hrs3300_alg_open &rArr; Hrs3300_normal_power &rArr; Hrs3300_write_reg &rArr; HRS_WriteBytes &rArr; HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_data_in
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_meas_timeout_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_presure_meas_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hr_app.o(i.InitHeatRate)
</UL>
<P><STRONG><a name="[2e2]"></a>hr_data_in</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hr_app.o(i.hr_data_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = hr_data_in &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_bp_event_handler
</UL>

<P><STRONG><a name="[2e3]"></a>hrs3300_power_on</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hr_app.o(i.hrs3300_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hrs3300_power_on
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
</UL>

<P><STRONG><a name="[2e5]"></a>im_address_resolve</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, id_manager.o(i.im_address_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = im_address_resolve &rArr; ah
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[2e6]"></a>im_ble_addr_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, id_manager.o(i.im_ble_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = im_ble_addr_get &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[2e7]"></a>im_ble_evt_handler</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, id_manager.o(i.im_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = im_ble_evt_handler &rArr; pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
</UL>

<P><STRONG><a name="[2cc]"></a>im_conn_handle_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, id_manager.o(i.im_conn_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_pdb_evt_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
</UL>

<P><STRONG><a name="[2ed]"></a>im_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, id_manager.o(i.im_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[2ef]"></a>im_is_duplicate_bonding_data</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, id_manager.o(i.im_is_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = im_is_duplicate_bonding_data &rArr; addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_irk
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
</UL>

<P><STRONG><a name="[2f2]"></a>im_master_id_is_valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, id_manager.o(i.im_master_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[2f1]"></a>im_master_ids_compare</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, id_manager.o(i.im_master_ids_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = im_master_ids_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[2eb]"></a>im_new_peer_id</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, id_manager.o(i.im_new_peer_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = im_new_peer_id &rArr; peer_id_set &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>

<P><STRONG><a name="[65]"></a>im_pdb_evt_handler</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, id_manager.o(i.im_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = im_pdb_evt_handler &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[208]"></a>im_peer_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, id_manager.o(i.im_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
</UL>

<P><STRONG><a name="[204]"></a>im_peer_id_get_by_conn_handle</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, id_manager.o(i.im_peer_id_get_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
</UL>

<P><STRONG><a name="[2f5]"></a>im_peer_id_get_by_master_id</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, id_manager.o(i.im_peer_id_get_by_master_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = im_peer_id_get_by_master_id &rArr; pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[2f6]"></a>im_whitelist_get</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, id_manager.o(i.im_whitelist_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = im_whitelist_get &rArr; peers_id_keys_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_get
</UL>

<P><STRONG><a name="[258]"></a>in_hour_min</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, alarm.o(i.in_hour_min))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_in_sedentary
</UL>

<P><STRONG><a name="[2f8]"></a>init_acc_time</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp.o(i.init_acc_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = init_acc_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[2f9]"></a>init_all</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, main.o(i.init_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = init_all &rArr; ManagePowerOn &rArr; wait_key_to_power_off &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_acc_time
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ui_time
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_acc_time
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_all_gpio
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_to_new_appilacation
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_InitWdt
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccPowerOff
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTimeInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open32768
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePowerOn
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUiFileCrc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStep
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfid
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPower
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHeatRate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExFlash
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEEprom
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HrCheckWear
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToRfid
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fa]"></a>init_ui_time</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ui_time.o(i.init_ui_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = init_ui_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[90]"></a>int_on_pin</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, app_button.o(i.int_on_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = int_on_pin &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acc__EnableClickDetect
</UL>

<P><STRONG><a name="[184]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[24a]"></a>is_ble_tx_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s132config.o(i.is_ble_tx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_wait_to_success
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_real_time_datas
</UL>

<P><STRONG><a name="[2f0]"></a>is_valid_irk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, id_manager.o(i.is_valid_irk))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>

<P><STRONG><a name="[144]"></a>key_press_jump_index</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ui_app.o(i.key_press_jump_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = key_press_jump_index
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTime
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySteps
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySportTime
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySleep
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayPair
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayK
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayHr
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayDistance
</UL>

<P><STRONG><a name="[81]"></a>kx023Init</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, lis3dh_driver.o(i.kx023Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kx023Init &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kx023softInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSpi
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccPowerOff
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>

<P><STRONG><a name="[308]"></a>kx023softInit</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, lis3dh_driver.o(i.kx023softInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = kx023softInit &rArr; LIS3DH_WriteReg &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kx023Init
</UL>

<P><STRONG><a name="[145]"></a>lcd_show_HR</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, ui_support.o(i.lcd_show_HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = lcd_show_HR &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayHr
</UL>

<P><STRONG><a name="[148]"></a>lcd_show_K</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, ui_support.o(i.lcd_show_K))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = lcd_show_K &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayK
</UL>

<P><STRONG><a name="[140]"></a>lcd_show_alarm</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, ui_support.o(i.lcd_show_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = lcd_show_alarm &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAlarm
</UL>

<P><STRONG><a name="[13f]"></a>lcd_show_battery</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, ui_support.o(i.lcd_show_battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = lcd_show_battery &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAlarm
</UL>

<P><STRONG><a name="[142]"></a>lcd_show_battery_charging</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ui_support.o(i.lcd_show_battery_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = lcd_show_battery_charging &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_in_sleep_mode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPowerLow
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCharge
</UL>

<P><STRONG><a name="[143]"></a>lcd_show_distance</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, ui_support.o(i.lcd_show_distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = lcd_show_distance &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayDistance
</UL>

<P><STRONG><a name="[14a]"></a>lcd_show_pair</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, ui_support.o(i.lcd_show_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = lcd_show_pair &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayPair
</UL>

<P><STRONG><a name="[14b]"></a>lcd_show_sleep</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, ui_support.o(i.lcd_show_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = lcd_show_sleep &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySleep
</UL>

<P><STRONG><a name="[14c]"></a>lcd_show_sport_time</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, ui_support.o(i.lcd_show_sport_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = lcd_show_sport_time &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySportTime
</UL>

<P><STRONG><a name="[14d]"></a>lcd_show_step</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, ui_support.o(i.lcd_show_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = lcd_show_step &rArr; TFT_ShowBmp_Flash &rArr; SPI_FLASH_ReadCont &rArr; StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySteps
</UL>

<P><STRONG><a name="[14f]"></a>lcd_show_time</STRONG> (Thumb, 906 bytes, Stack size 72 bytes, ui_support.o(i.lcd_show_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = lcd_show_time &rArr; Displayhhmm &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayhhmm
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNumber
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMonthDay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAnaTime
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTime
</UL>

<P><STRONG><a name="[131]"></a>lcd_spi_send</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lcd.o(i.lcd_spi_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lcd_spi_send &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_Byte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetRegion
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[1a6]"></a>lcd_swap_buf</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcd.o(i.lcd_swap_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_swap_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
</UL>

<P><STRONG><a name="[41]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = main &rArr; TaskBleUpfile &rArr; task_and_ble_data &rArr; TestPrintfaddr &rArr; TaskPrintfFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_ui
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_FeedWdog
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ae]"></a>monthLength</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, softwarertc.o(i.monthLength))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_time_to_Second
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
</UL>

<P><STRONG><a name="[2ea]"></a>new_connection</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, id_manager.o(i.new_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = new_connection &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[31e]"></a>next_id_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, peer_id.o(i.next_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>

<P><STRONG><a name="[3be]"></a>nrf_ble_ancs_c_attr_add</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, nrf_ble_ancs_c.o(i.nrf_ble_ancs_c_attr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_ble_ancs_c_attr_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[34c]"></a>nrf_ble_ancs_c_handles_assign</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_ble_ancs_c.o(i.nrf_ble_ancs_c_handles_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_ble_ancs_c_handles_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[323]"></a>nrf_ble_ancs_c_request_attrs</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_ble_ancs_c.o(i.nrf_ble_ancs_c_request_attrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_ble_ancs_c_request_attrs &rArr; ble_ancs_get_notif_attrs &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_get_notif_attrs
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_verify_notification_format
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_print
</UL>

<P><STRONG><a name="[2b4]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[23f]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_data_length_update_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[32c]"></a>nrf_drv_clock_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
</UL>

<P><STRONG><a name="[32f]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_disable
</UL>

<P><STRONG><a name="[330]"></a>nrf_drv_clock_on_sd_disable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_sd_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_on_sd_disable &rArr; nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_sd_disable
</UL>

<P><STRONG><a name="[331]"></a>nrf_drv_clock_on_sd_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_sd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_on_sd_enable &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[303]"></a>nrf_drv_clock_on_soc_event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_soc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_on_soc_event &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>

<P><STRONG><a name="[32d]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_disable
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[302]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_on_pin
</UL>

<P><STRONG><a name="[301]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_on_pin
</UL>

<P><STRONG><a name="[300]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_on_pin
</UL>

<P><STRONG><a name="[2ff]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_on_pin
</UL>

<P><STRONG><a name="[197]"></a>nrf_drv_saadc_buffer_convert</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_callback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdc
</UL>

<P><STRONG><a name="[196]"></a>nrf_drv_saadc_channel_init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_saadc_channel_init &rArr; nrf_saadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdc
</UL>

<P><STRONG><a name="[114]"></a>nrf_drv_saadc_init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_saadc_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[198]"></a>nrf_drv_saadc_sample</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_saadc_sample
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdc
</UL>

<P><STRONG><a name="[c6]"></a>nrf_drv_spi_init</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_enable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSpi
</UL>

<P><STRONG><a name="[343]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
</UL>

<P><STRONG><a name="[c7]"></a>nrf_drv_spi_uninit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_drv_spi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSpi
</UL>

<P><STRONG><a name="[344]"></a>nrf_drv_spi_xfer</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[33d]"></a>nrf_saadc_channel_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, nrf_saadc.o(i.nrf_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
</UL>

<P><STRONG><a name="[13a]"></a>oled_display_on</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lcd.o(i.oled_display_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = oled_display_on &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_Byte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnLcdSpi
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_key_to_power_off
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_in_sleep_mode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPowerLow
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showUpgredePersent
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayOff
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNotice
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCharge
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAlarm
</UL>

<P><STRONG><a name="[349]"></a>oled_show_version</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, ui_support.o(i.oled_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = oled_show_version &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_key_to_power_off
</UL>

<P><STRONG><a name="[35f]"></a>pdb_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, peer_database.o(i.pdb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pdb_init &rArr; pm_buffer_init &rArr; pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[361]"></a>pdb_next_deleted_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_database.o(i.pdb_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pdb_next_deleted_peer_id_get &rArr; pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[2d7]"></a>pdb_next_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_database.o(i.pdb_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
</UL>

<P><STRONG><a name="[63]"></a>pdb_pds_evt_handler</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, peer_database.o(i.pdb_pds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pdb_pds_evt_handler &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(.constdata)
</UL>
<P><STRONG><a name="[315]"></a>pdb_peer_allocate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, peer_database.o(i.pdb_peer_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pdb_peer_allocate &rArr; pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
</UL>

<P><STRONG><a name="[2da]"></a>pdb_peer_data_ptr_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peer_database.o(i.pdb_peer_data_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[2f4]"></a>pdb_peer_free</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, peer_database.o(i.pdb_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>

<P><STRONG><a name="[2d4]"></a>pdb_raw_store</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peer_database.o(i.pdb_raw_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>

<P><STRONG><a name="[2dc]"></a>pdb_write_buf_get</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, peer_database.o(i.pdb_write_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pdb_write_buf_get &rArr; pm_buffer_block_acquire &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_get
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[2dd]"></a>pdb_write_buf_release</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, peer_database.o(i.pdb_write_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pdb_write_buf_release &rArr; write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[206]"></a>pdb_write_buf_store</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, peer_database.o(i.pdb_write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_length_words_set
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[314]"></a>pdb_write_buf_store_prepare</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, peer_database.o(i.pdb_write_buf_store_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pdb_write_buf_store_prepare &rArr; pds_space_reserve &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_length_words_set
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[376]"></a>pds_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[362]"></a>pds_next_deleted_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
</UL>

<P><STRONG><a name="[363]"></a>pds_next_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>

<P><STRONG><a name="[2e9]"></a>pds_peer_data_iterate</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_peer_data_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_to_peer_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[2e8]"></a>pds_peer_data_iterate_prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_data_iterate_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[368]"></a>pds_peer_data_read</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_peer_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
</UL>

<P><STRONG><a name="[36b]"></a>pds_peer_data_store</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, peer_data_storage.o(i.pds_peer_data_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>

<P><STRONG><a name="[367]"></a>pds_peer_id_allocate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
</UL>

<P><STRONG><a name="[36a]"></a>pds_peer_id_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[36c]"></a>pds_peer_id_is_allocated</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pds_peer_id_is_allocated &rArr; peer_id_is_allocated &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[375]"></a>pds_space_reserve</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pds_space_reserve &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[372]"></a>pds_space_reserve_cancel</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_space_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pds_space_reserve_cancel &rArr; fds_reserve_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
</UL>

<P><STRONG><a name="[381]"></a>peer_id_allocate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>

<P><STRONG><a name="[382]"></a>peer_id_delete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, peer_id.o(i.peer_id_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = peer_id_delete &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[285]"></a>peer_id_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = peer_id_free &rArr; release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[37a]"></a>peer_id_get_next_deleted</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_get_next_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[37b]"></a>peer_id_get_next_used</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_get_next_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>

<P><STRONG><a name="[378]"></a>peer_id_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = peer_id_init &rArr; pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[383]"></a>peer_id_is_allocated</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_is_allocated &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>

<P><STRONG><a name="[385]"></a>peer_id_is_deleted</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_is_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_is_deleted &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>

<P><STRONG><a name="[36f]"></a>pm_buffer_block_acquire</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pm_buffer.o(i.pm_buffer_block_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pm_buffer_block_acquire &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[360]"></a>pm_buffer_init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, pm_buffer.o(i.pm_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_buffer_init &rArr; pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>

<P><STRONG><a name="[370]"></a>pm_buffer_ptr_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_buffer_ptr_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[36d]"></a>pm_buffer_release</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
</UL>

<P><STRONG><a name="[38d]"></a>pm_conn_sec_config_reply</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, peer_manager.o(i.pm_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pm_conn_sec_config_reply &rArr; sm_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_config_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[95]"></a>pm_conn_sec_status_get</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, peer_manager.o(i.pm_conn_sec_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pm_conn_sec_status_get &rArr; ble_conn_state_status &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AskPair
</UL>

<P><STRONG><a name="[99]"></a>pm_conn_secure</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, peer_manager.o(i.pm_conn_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = pm_conn_secure &rArr; sm_link_secure &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AskPair
</UL>

<P><STRONG><a name="[3]"></a>pm_gcm_evt_handler</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, peer_manager.o(i.pm_gcm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_gcm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>pm_im_evt_handler</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, peer_manager.o(i.pm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pm_im_evt_handler &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[389]"></a>pm_init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, peer_manager.o(i.pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pm_init &rArr; pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[391]"></a>pm_local_database_has_changed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_manager.o(i.pm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[387]"></a>pm_mutex_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pm_mutex.o(i.pm_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
</UL>

<P><STRONG><a name="[25d]"></a>pm_mutex_lock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pm_mutex.o(i.pm_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
</UL>

<P><STRONG><a name="[25c]"></a>pm_mutex_lock_first_available</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pm_mutex.o(i.pm_mutex_lock_first_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>

<P><STRONG><a name="[31f]"></a>pm_mutex_lock_status_get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pm_mutex.o(i.pm_mutex_lock_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>

<P><STRONG><a name="[38c]"></a>pm_mutex_unlock</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, pm_mutex.o(i.pm_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>

<P><STRONG><a name="[23c]"></a>pm_on_ble_evt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, peer_manager.o(i.pm_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = pm_on_ble_evt &rArr; sm_ble_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[64]"></a>pm_pdb_evt_handler</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, peer_manager.o(i.pm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pm_pdb_evt_handler &rArr; pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[393]"></a>pm_peer_delete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peer_manager.o(i.pm_peer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
</UL>

<P><STRONG><a name="[272]"></a>pm_peers_delete</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, peer_manager.o(i.pm_peers_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_bonds
</UL>

<P><STRONG><a name="[38b]"></a>pm_register</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, peer_manager.o(i.pm_register))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[38a]"></a>pm_sec_params_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, peer_manager.o(i.pm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_sec_params_set &rArr; sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[6b]"></a>pm_sm_evt_handler</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, peer_manager.o(i.pm_sm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pm_sm_evt_handler &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(.constdata)
</UL>
<P><STRONG><a name="[34a]"></a>pm_whitelist_get</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, peer_manager.o(i.pm_whitelist_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pm_whitelist_get &rArr; im_whitelist_get &rArr; peers_id_keys_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[399]"></a>power_charge_statues</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, battery_adc.o(i.power_charge_statues))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = power_charge_statues &rArr; charger_status
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charger_status
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
</UL>

<P><STRONG><a name="[152]"></a>power_manage</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, s132config.o(i.power_manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = power_manage &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_wait_to_success
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPowerLow
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowerPower
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
</UL>

<P><STRONG><a name="[39a]"></a>print_ket_state</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lis3dh_driver.o(i.print_ket_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = print_ket_state &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetClickResponse
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
</UL>

<P><STRONG><a name="[1dc]"></a>read_history_items</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, in_flash_manage.o(i.read_history_items))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_history_items
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_time_point
</UL>

<P><STRONG><a name="[3aa]"></a>return_to_normal_speed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, protocol.o(i.return_to_normal_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = return_to_normal_speed &rArr; ChangeToHightSpeed &rArr; conn_params_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToHightSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
</UL>

<P><STRONG><a name="[49]"></a>rtc_event_handler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp.o(i.rtc_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_event_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.RtcTimeInit)
</UL>
<P><STRONG><a name="[59]"></a>s132_config_enable</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, s132config.o(i.s132_config_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = s132_config_enable &rArr; StartAdv &rArr; advertising_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_addr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdv
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_nus_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_bonds
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_discovery_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_sd_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_all)
</UL>
<P><STRONG><a name="[a4]"></a>s_abs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sleep.o(i.s_abs))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallByGsensor
</UL>

<P><STRONG><a name="[46]"></a>saadc_callback</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, battery_adc.o(i.saadc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = saadc_callback &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery_adc.o(i.InitAdc)
</UL>
<P><STRONG><a name="[3b1]"></a>save_hr_or_redetect</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hr_app.o(i.save_hr_or_redetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = save_hr_or_redetect &rArr; StartHeatRate &rArr; start_hr3300 &rArr; start_hr_bp_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHeatRate
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHeatRate
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
</UL>

<P><STRONG><a name="[3a7]"></a>sdk_mapped_flags_bulk_update_by_key</STRONG> (Thumb, 124 bytes, Stack size 28 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_bulk_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
</UL>

<P><STRONG><a name="[3a1]"></a>sdk_mapped_flags_first_key_index_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_first_key_index_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>

<P><STRONG><a name="[22b]"></a>sdk_mapped_flags_get_by_key</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
</UL>

<P><STRONG><a name="[229]"></a>sdk_mapped_flags_key_list_get</STRONG> (Thumb, 66 bytes, Stack size 88 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_key_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sdk_mapped_flags_key_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[230]"></a>sdk_mapped_flags_update_by_key</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>

<P><STRONG><a name="[24b]"></a>send_ble_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, s132config.o(i.send_ble_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_ble_data &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_wait_to_success
</UL>

<P><STRONG><a name="[3ba]"></a>send_real_time_datas</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, protocol.o(i.send_real_time_datas))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_real_time_datas &rArr; BleWriteData &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ble_tx_enable
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHrState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
</UL>

<P><STRONG><a name="[3bb]"></a>send_time_point</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, protocol.o(i.send_time_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = send_time_point &rArr; usr_api_read &rArr; data_use_packet_data &rArr; ble_send_hr &rArr; ble_send_wait_to_success &rArr; task_ui &rArr; task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_api_read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_history_step
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_current_step
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleWriteData
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepRecord
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepIndex
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
</UL>

<P><STRONG><a name="[3af]"></a>set_addr</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, s132config.o(i.set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
</UL>

<P><STRONG><a name="[c9]"></a>showUpgredePersent</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, ui_support.o(i.showUpgredePersent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_key_to_power_off
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBleUpdata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBvkFlash
</UL>

<P><STRONG><a name="[1b7]"></a>show_test_mode</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, ui_app.o(i.show_test_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = show_test_mode &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadProx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_FeedWdog
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HrCheckWear
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorOn
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSem
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHeatRate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printfdata
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayOff
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskUpFile
</UL>

<P><STRONG><a name="[397]"></a>sm_ble_evt_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, security_manager.o(i.sm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = sm_ble_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
</UL>

<P><STRONG><a name="[38e]"></a>sm_conn_sec_config_reply</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, security_manager.o(i.sm_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sm_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_config_reply
</UL>

<P><STRONG><a name="[394]"></a>sm_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, security_manager.o(i.sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm_init &rArr; flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[38f]"></a>sm_link_secure</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, security_manager.o(i.sm_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = sm_link_secure &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_secure
</UL>

<P><STRONG><a name="[66]"></a>sm_pdb_evt_handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, security_manager.o(i.sm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = sm_pdb_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[398]"></a>sm_sec_params_set</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, security_manager.o(i.sm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
</UL>

<P><STRONG><a name="[69]"></a>sm_smd_evt_handler</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, security_manager.o(i.sm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = sm_smd_evt_handler &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[3c0]"></a>smd_ble_evt_handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, security_dispatcher.o(i.smd_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = smd_ble_evt_handler &rArr; auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_request_process
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[395]"></a>smd_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, security_dispatcher.o(i.smd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smd_init &rArr; flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[30e]"></a>smd_link_secure</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, security_dispatcher.o(i.smd_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_peripheral
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[3c3]"></a>smd_params_reply</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, security_dispatcher.o(i.smd_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = smd_params_reply &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[67]"></a>smd_pdb_evt_handler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, security_dispatcher.o(i.smd_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smd_pdb_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[250]"></a>softdevice_app_ram_start_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_app_ram_start_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[252]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[251]"></a>softdevice_enable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[60]"></a>softdevice_fault_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = softdevice_fault_handler &rArr; app_error_fault_handler &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[24f]"></a>softdevice_handler_init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = softdevice_handler_init &rArr; nrf_drv_clock_on_sd_enable &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[32e]"></a>softdevice_handler_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_handler_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[3b0]"></a>softdevice_handler_sd_disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_handler_sd_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = softdevice_handler_sd_disable &rArr; nrf_drv_clock_on_sd_disable &rArr; nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
</UL>

<P><STRONG><a name="[253]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[45]"></a>spi_event_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi52.o(i.spi_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> spi52.o(i.EnableSpi)
</UL>
<P><STRONG><a name="[d5]"></a>spi_send</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, spi52.o(i.spi_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteCont
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadCont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_spi_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSend
</UL>

<P><STRONG><a name="[2fc]"></a>start_acc_time</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp.o(i.start_acc_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = start_acc_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_all
</UL>

<P><STRONG><a name="[162]"></a>start_hr3300</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, hr_app.o(i.start_hr3300))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = start_hr3300 &rArr; start_hr_bp_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_chip_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_chip_enable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_chip_disable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_bp_alg_open
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_alg_open
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr_bp_time
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrs3300_power_on
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hrs3300_set_exinf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProximityDet
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHeatRate
</UL>

<P><STRONG><a name="[3c7]"></a>start_hr_bp_time</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hr_app.o(i.start_hr_bp_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = start_hr_bp_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_hr3300
</UL>

<P><STRONG><a name="[141]"></a>start_sys_time</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ui_time.o(i.start_sys_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = start_sys_time &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_ui
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_in_sleep_mode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPowerLow
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_test_mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTime
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySteps
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySportTime
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySleep
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayPair
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayOff
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNotice
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayK
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayHr
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayDistance
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCharge
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAlarm
</UL>

<P><STRONG><a name="[130]"></a>start_trancs_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd.o(i.start_trancs_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_trancs_data
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[195]"></a>step_counter</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, pedometer_klx.o(i.step_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = step_counter &rArr; Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SportsProcess
</UL>

<P><STRONG><a name="[5a]"></a>sys_time_event_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ui_time.o(i.sys_time_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_time_event_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_time.o(i.init_ui_time)
</UL>
<P><STRONG><a name="[1aa]"></a>task_and_ble_data</STRONG> (Thumb, 3780 bytes, Stack size 72 bytes, protocol.o(i.task_and_ble_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = task_and_ble_data &rArr; TestPrintfaddr &rArr; TaskPrintfFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_api_read
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_time_to_Second
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_history_items
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromAnsy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromSetParaToFactory
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskUpFile
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorOn
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBleUpdata
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFileIn
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBond
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToHightSpeed
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleWriteData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AskPair
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintfaddr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintfSleep
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleQueueOut
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_time_point
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_time_point
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSendentarypara
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHighSpeed
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBandParaSendentary
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBandParaAlarm_new
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBandParaAlarm
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBandPara
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepRecord
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSleepIndex
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendItems
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlarm
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSleepRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskBleUpfile
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3cf]"></a>task_process_message</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, bsp.o(i.task_process_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_real_time_datas
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_hr_or_redetect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_to_normal_speed
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ket_state
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_charge_statues
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_hr_real_time
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskUpFile
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPowerLow
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBleConnect
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDateInMin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_step_datas_in_500ms
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSport
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorOn
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_ui
</UL>

<P><STRONG><a name="[249]"></a>task_ui</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ui_app.o(i.task_ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = task_ui &rArr; task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSem
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sys_time
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoticeCloseHr
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_wait_to_success
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[218]"></a>tx_buffer_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ancs_tx_buffer.o(i.tx_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_buffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_init
</UL>

<P><STRONG><a name="[220]"></a>tx_buffer_insert</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, ancs_tx_buffer.o(i.tx_buffer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_buffer_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_get_notif_attrs
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_configure
</UL>

<P><STRONG><a name="[221]"></a>tx_buffer_process</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ancs_tx_buffer.o(i.tx_buffer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_get_notif_attrs
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write_rsp
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_configure
</UL>

<P><STRONG><a name="[d8]"></a>u32equel</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, in_flash_manage.o(i.u32equel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = u32equel
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_World
</UL>

<P><STRONG><a name="[27d]"></a>updateDateInMin</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp.o(i.updateDateInMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = updateDateInMin &rArr; TaskGetPower &rArr; GetVol &rArr; StartAdc &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromAnsy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSleep
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSendentaryCheck
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGetPower
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCheckWearAndTestHr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskAlarmCheck
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWearFlg
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process_if_change_day
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_in_sleep_mode
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_process_message
</UL>

<P><STRONG><a name="[1dd]"></a>usr_api_read</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, queueu51822.o(i.usr_api_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = usr_api_read &rArr; data_use_packet_data &rArr; ble_send_hr &rArr; ble_send_wait_to_success &rArr; task_ui &rArr; task_process_message &rArr; TaskUpFile &rArr; IntoTestMode &rArr; TaskP24UpdataFile &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashQueue_GetTail
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_use_packet_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_and_ble_data
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_time_point
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_time_point
</UL>

<P><STRONG><a name="[1c0]"></a>usr_api_write</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, data_use_api.o(i.usr_api_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = usr_api_write &rArr; WriteDataToQueue &rArr; FlashQueue_EnQueue &rArr; FlashQueue_SaveParam &rArr; Flash_Write_World &rArr; EnableAllGPIOEInt &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHeatRate
</UL>

<P><STRONG><a name="[155]"></a>wait_key_to_power_off</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, ui_app.o(i.wait_key_to_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = wait_key_to_power_off &rArr; showUpgredePersent &rArr; Printfdata &rArr; ShowIcon &rArr; EnLcdSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_escape_ms
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showUpgredePersent
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_version
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayOff
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePowerOn
</UL>

<P><STRONG><a name="[157]"></a>wait_key_to_power_on</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.wait_key_to_power_on))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManagePowerOn
</UL>

<P><STRONG><a name="[26c]"></a>write_para_history</STRONG> (Thumb, 550 bytes, Stack size 88 bytes, in_flash_manage.o(i.write_para_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = write_para_history &rArr; ConvertToUTCTime &rArr; GetWeek
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_time_to_Second
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUTCTime
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process_if_change_day
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c5]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, in_flash_manage.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAllGPIOEInt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[c4]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, in_flash_manage.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAllGPIOEInt
</UL>

<P><STRONG><a name="[4c]"></a>B_ReadWdtRunStatues</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wdt.o(i.B_ReadWdtRunStatues))
<BR>[Address Reference Count : 1]<UL><LI> wdt.o(i.V_InitWdt)
</UL>
<P><STRONG><a name="[48]"></a>motor_timeout_handler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, bsp.o(i.motor_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.InitMotor)
</UL>
<P><STRONG><a name="[11f]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotor
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timeout_handler
</UL>

<P><STRONG><a name="[31d]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timeout_handler
</UL>

<P><STRONG><a name="[1a4]"></a>errata_108</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_108))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[19c]"></a>errata_12</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_12))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[19d]"></a>errata_16</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_16))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[19e]"></a>errata_31</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_31))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[19f]"></a>errata_32</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_32))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1a0]"></a>errata_36</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1a1]"></a>errata_37</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_37))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1a2]"></a>errata_57</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_57))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1a3]"></a>errata_66</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[20a]"></a>advdata_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advdata.o(i.advdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[1cd]"></a>appearance_encode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1cc]"></a>ble_device_addr_encode</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[267]"></a>conn_int_check</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[1d1]"></a>conn_int_encode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1ce]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1d2]"></a>manuf_specific_data_encode</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1cb]"></a>name_encode</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1d3]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[20b]"></a>srdata_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advdata.o(i.srdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[1cf]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1f3]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[1d0]"></a>uuid_list_encode</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[3e3]"></a>uuid_list_sized_encode</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[1d5]"></a>addr_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.addr_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
</UL>

<P><STRONG><a name="[1d4]"></a>adv_mode_next_avail_get</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_advertising.o(i.adv_mode_next_avail_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_mode_next_avail_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[356]"></a>adv_mode_next_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.adv_mode_next_get))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
</UL>

<P><STRONG><a name="[211]"></a>flash_access_in_progress</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_advertising.o(i.flash_access_in_progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_access_in_progress
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_queued_op_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[20d]"></a>on_connected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advertising.o(i.on_connected))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[20e]"></a>on_disconnected</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_advertising.o(i.on_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = on_disconnected &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[20f]"></a>on_timeout</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_advertising.o(i.on_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = on_timeout &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_get
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[212]"></a>set_adv_mode_directed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[213]"></a>set_adv_mode_directed_slow</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed_slow))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[214]"></a>set_adv_mode_fast</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_adv_mode_fast &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[215]"></a>set_adv_mode_slow</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[3bf]"></a>whitelist_has_entries</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[268]"></a>is_conn_params_ok</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[227]"></a>on_conn_params_update</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[224]"></a>on_connect</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[225]"></a>on_disconnect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[226]"></a>on_write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[4f]"></a>update_timeout_handler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[22f]"></a>record_activate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = record_activate &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[3a6]"></a>record_invalidate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = record_invalidate &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[22e]"></a>record_purge_disconnected</STRONG> (Thumb, 62 bytes, Stack size 144 bytes, ble_conn_state.o(i.record_purge_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = record_purge_disconnected &rArr; sdk_mapped_flags_key_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[231]"></a>record_set_disconnected</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_set_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = record_set_disconnected &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[235]"></a>user_flag_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_conn_state.o(i.user_flag_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>

<P><STRONG><a name="[234]"></a>user_flag_is_acquired</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_conn_state.o(i.user_flag_is_acquired))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>

<P><STRONG><a name="[350]"></a>characteristics_discover</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_db_discovery.o(i.characteristics_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = characteristics_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[276]"></a>descriptors_discover</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, ble_db_discovery.o(i.descriptors_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = descriptors_discover &rArr; is_desc_discovery_reqd
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_desc_discovery_reqd
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[279]"></a>discovery_complete_evt_trigger</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ble_db_discovery.o(i.discovery_complete_evt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = discovery_complete_evt_trigger &rArr; pending_user_evts_send
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_get
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_user_evts_send
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[27c]"></a>discovery_error_evt_trigger</STRONG> (Thumb, 62 bytes, Stack size 128 bytes, ble_db_discovery.o(i.discovery_error_evt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[34f]"></a>is_char_discovery_reqd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_db_discovery.o(i.is_char_discovery_reqd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_char_discovery_reqd
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[277]"></a>is_desc_discovery_reqd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ble_db_discovery.o(i.is_desc_discovery_reqd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_desc_discovery_reqd
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
</UL>

<P><STRONG><a name="[239]"></a>on_characteristic_discovery_rsp</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, ble_db_discovery.o(i.on_characteristic_discovery_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = on_characteristic_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_char_discovery_reqd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristics_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[23a]"></a>on_descriptor_discovery_rsp</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, ble_db_discovery.o(i.on_descriptor_discovery_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = on_descriptor_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[23b]"></a>on_disconnected</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_db_discovery.o(i.on_disconnected))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[238]"></a>on_primary_srv_discovery_rsp</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ble_db_discovery.o(i.on_primary_srv_discovery_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = on_primary_srv_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristics_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[351]"></a>on_srv_disc_completion</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ble_db_discovery.o(i.on_srv_disc_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = on_srv_disc_completion &rArr; discovery_error_evt_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[27b]"></a>pending_user_evts_send</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ble_db_discovery.o(i.pending_user_evts_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pending_user_evts_send
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
</UL>

<P><STRONG><a name="[27a]"></a>registered_handler_get</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ble_db_discovery.o(i.registered_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_set
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
</UL>

<P><STRONG><a name="[236]"></a>registered_handler_set</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_db_discovery.o(i.registered_handler_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = registered_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_evt_register
</UL>

<P><STRONG><a name="[24d]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>

<P><STRONG><a name="[2de]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
</UL>

<P><STRONG><a name="[2d6]"></a>internal_state_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gatts_cache_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
</UL>

<P><STRONG><a name="[2d8]"></a>service_changed_pending_set</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.service_changed_pending_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
</UL>

<P><STRONG><a name="[2ec]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, id_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[2ee]"></a>internal_state_reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, id_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
</UL>

<P><STRONG><a name="[2f3]"></a>peer_id_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, id_manager.o(i.peer_id_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = peer_id_set &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
</UL>

<P><STRONG><a name="[2f7]"></a>peers_id_keys_get</STRONG> (Thumb, 210 bytes, Stack size 136 bytes, id_manager.o(i.peers_id_keys_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = peers_id_keys_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_get
</UL>

<P><STRONG><a name="[352]"></a>data_length_update</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.data_length_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>

<P><STRONG><a name="[325]"></a>link_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
</UL>

<P><STRONG><a name="[326]"></a>on_connected_evt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_connected_evt &rArr; data_length_update
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[32a]"></a>on_data_length_update_evt</STRONG> (Thumb, 78 bytes, Stack size 80 bytes, nrf_ble_gatt.o(i.on_data_length_update_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_data_length_update_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[32b]"></a>on_data_length_update_request_evt</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.on_data_length_update_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_data_length_update_request_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[327]"></a>on_disconnected_evt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.on_disconnected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_disconnected_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[329]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_exchange_mtu_request_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[328]"></a>on_exchange_mtu_rsp_evt</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_rsp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_exchange_mtu_rsp_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[5b]"></a>fds_evt_handler</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, peer_data_storage.o(i.fds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fds_evt_handler &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_key_within_pm_range
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_key_to_peer_data_id
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_within_pm_range
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_to_peer_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(i.pds_init)
</UL>
<P><STRONG><a name="[282]"></a>file_id_to_peer_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.file_id_to_peer_id))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[280]"></a>file_id_within_pm_range</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, peer_data_storage.o(i.file_id_within_pm_range))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[284]"></a>pds_evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[286]"></a>peer_data_delete</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, peer_data_storage.o(i.peer_data_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[37e]"></a>peer_data_find</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, peer_data_storage.o(i.peer_data_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[37d]"></a>peer_data_id_is_valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[37c]"></a>peer_data_id_to_record_key</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_to_record_key))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[37f]"></a>peer_id_to_file_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_id_to_file_id))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[379]"></a>peer_ids_load</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, peer_data_storage.o(i.peer_ids_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = peer_ids_load &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_to_peer_id
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[283]"></a>record_key_to_peer_data_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peer_data_storage.o(i.record_key_to_peer_data_id))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[281]"></a>record_key_within_pm_range</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, peer_data_storage.o(i.record_key_within_pm_range))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[304]"></a>internal_state_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, peer_database.o(i.internal_state_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = internal_state_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>

<P><STRONG><a name="[366]"></a>pdb_evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_database.o(i.pdb_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[373]"></a>peer_data_const_point_to_buffer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, peer_database.o(i.peer_data_const_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = peer_data_const_point_to_buffer &rArr; peer_data_point_to_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[371]"></a>peer_data_point_to_buffer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_database.o(i.peer_data_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
</UL>

<P><STRONG><a name="[374]"></a>write_buf_length_words_set</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, peer_database.o(i.write_buf_length_words_set))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[364]"></a>write_buffer_record_find</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, peer_database.o(i.write_buffer_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_unused
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[369]"></a>write_buffer_record_find_next</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, peer_database.o(i.write_buffer_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>

<P><STRONG><a name="[3e5]"></a>write_buffer_record_find_unused</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_database.o(i.write_buffer_record_find_unused))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_buffer_record_find_unused &rArr; write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_get
</UL>

<P><STRONG><a name="[36e]"></a>write_buffer_record_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_buffer_record_get &rArr; write_buffer_record_find_unused &rArr; write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[305]"></a>write_buffer_record_invalidate</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, peer_database.o(i.write_buffer_record_invalidate))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>

<P><STRONG><a name="[365]"></a>write_buffer_record_release</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[25b]"></a>claim</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, peer_id.o(i.claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[386]"></a>internal_state_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peer_id.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
</UL>

<P><STRONG><a name="[384]"></a>release</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, peer_id.o(i.release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
</UL>

<P><STRONG><a name="[392]"></a>evt_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, peer_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
</UL>

<P><STRONG><a name="[396]"></a>internal_state_reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, peer_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[31c]"></a>lock_by_mask</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pm_mutex.o(i.lock_by_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>

<P><STRONG><a name="[1ff]"></a>auth_status_failure_process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, security_dispatcher.o(i.auth_status_failure_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = auth_status_failure_process &rArr; link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>

<P><STRONG><a name="[201]"></a>auth_status_process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, security_dispatcher.o(i.auth_status_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_failure_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[202]"></a>auth_status_success_process</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, security_dispatcher.o(i.auth_status_success_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = auth_status_success_process &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>

<P><STRONG><a name="[269]"></a>conn_sec_update_process</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, security_dispatcher.o(i.conn_sec_update_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = conn_sec_update_process &rArr; encryption_failure &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[278]"></a>disconnect_process</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, security_dispatcher.o(i.disconnect_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = disconnect_process &rArr; link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[26a]"></a>encryption_failure</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, security_dispatcher.o(i.encryption_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = encryption_failure &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[207]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, security_dispatcher.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_pdb_evt_handler
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_request_process
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[2a4]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_dispatcher.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
</UL>

<P><STRONG><a name="[30f]"></a>link_secure_central</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, security_dispatcher.o(i.link_secure_central))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>

<P><STRONG><a name="[310]"></a>link_secure_central_existing_peer</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, security_dispatcher.o(i.link_secure_central_existing_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[311]"></a>link_secure_central_new_peer</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, security_dispatcher.o(i.link_secure_central_new_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = link_secure_central_new_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[200]"></a>link_secure_failure</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, security_dispatcher.o(i.link_secure_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_failure_process
</UL>

<P><STRONG><a name="[3c2]"></a>link_secure_peripheral</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, security_dispatcher.o(i.link_secure_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = link_secure_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>

<P><STRONG><a name="[316]"></a>pairing_failure</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, security_dispatcher.o(i.pairing_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[3b6]"></a>sec_info_request_process</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, security_dispatcher.o(i.sec_info_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sec_info_request_process &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[3b7]"></a>sec_params_request_process</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, security_dispatcher.o(i.sec_params_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sec_params_request_process &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[312]"></a>sec_proc_start</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, security_dispatcher.o(i.sec_proc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[3b8]"></a>sec_request_process</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, security_dispatcher.o(i.sec_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sec_request_process &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[313]"></a>sec_start_send</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, security_dispatcher.o(i.sec_start_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sec_start_send &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[27e]"></a>events_send_from_err_code</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, security_manager.o(i.events_send_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = events_send_from_err_code &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[27f]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, security_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[2a5]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_manager.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
</UL>

<P><STRONG><a name="[2a6]"></a>flags_set_from_err_code</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, security_manager.o(i.flags_set_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = flags_set_from_err_code &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[30d]"></a>link_secure</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, security_manager.o(i.link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_link_secure
</UL>

<P><STRONG><a name="[317]"></a>link_secure_pending_process</STRONG> (Thumb, 118 bytes, Stack size 104 bytes, security_manager.o(i.link_secure_pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[35d]"></a>params_reply_pending_process</STRONG> (Thumb, 72 bytes, Stack size 88 bytes, security_manager.o(i.params_reply_pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = params_reply_pending_process &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
</UL>

<P><STRONG><a name="[318]"></a>sdk_mapped_flags_any_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, security_manager.o(i.sdk_mapped_flags_any_set))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>

<P><STRONG><a name="[3c1]"></a>sec_params_verify</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, security_manager.o(i.sec_params_verify))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>

<P><STRONG><a name="[3b9]"></a>send_config_req</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, security_manager.o(i.send_config_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_config_req &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[35e]"></a>smd_params_reply_perform</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, security_manager.o(i.smd_params_reply_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[1f7]"></a>apply_pending_flags_check</STRONG> (Thumb, 82 bytes, Stack size 152 bytes, gatt_cache_manager.o(i.apply_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = apply_pending_flags_check &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[2c8]"></a>cccd_written</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.cccd_written))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[2c7]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[2cf]"></a>internal_state_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
</UL>

<P><STRONG><a name="[1fc]"></a>local_db_apply_in_evt</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.local_db_apply_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[2c9]"></a>local_db_update_in_evt</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.local_db_update_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_smd_evt_handler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[1f9]"></a>sdk_mapped_flags_any_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.sdk_mapped_flags_any_set))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
</UL>

<P><STRONG><a name="[2cb]"></a>service_changed_pending_flags_check</STRONG> (Thumb, 98 bytes, Stack size 152 bytes, gatt_cache_manager.o(i.service_changed_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[3bc]"></a>service_changed_send_in_evt</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, gatt_cache_manager.o(i.service_changed_send_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
</UL>

<P><STRONG><a name="[2ca]"></a>update_pending_flags_check</STRONG> (Thumb, 82 bytes, Stack size 152 bytes, gatt_cache_manager.o(i.update_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = update_pending_flags_check &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[243]"></a>on_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_nus.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[244]"></a>on_disconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_nus.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[245]"></a>on_write</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_nus.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[242]"></a>rx_char_add</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, ble_nus.o(i.rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[241]"></a>tx_char_add</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, ble_nus.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[324]"></a>ble_ancs_verify_notification_format</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_ble_ancs_c.o(i.ble_ancs_verify_notification_format))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_ancs_c_request_attrs
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_notif
</UL>

<P><STRONG><a name="[216]"></a>cccd_configure</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, nrf_ble_ancs_c.o(i.cccd_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cccd_configure &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_insert
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_notif_source_notif_enable
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_data_source_notif_enable
</UL>

<P><STRONG><a name="[357]"></a>on_ctrlpt_error_rsp</STRONG> (Thumb, 30 bytes, Stack size 128 bytes, nrf_ble_ancs_c.o(i.on_ctrlpt_error_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_ctrlpt_error_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write_rsp
</UL>

<P><STRONG><a name="[21d]"></a>on_disconnected</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_ble_ancs_c.o(i.on_disconnected))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_ble_evt
</UL>

<P><STRONG><a name="[21c]"></a>on_evt_gattc_notif</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_ble_ancs_c.o(i.on_evt_gattc_notif))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = on_evt_gattc_notif &rArr; parse_notif
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_parse_get_attrs_response
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_notif
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_ble_evt
</UL>

<P><STRONG><a name="[21b]"></a>on_write_rsp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_ble_ancs_c.o(i.on_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = on_write_rsp &rArr; on_ctrlpt_error_rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrlpt_error_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_ble_evt
</UL>

<P><STRONG><a name="[353]"></a>parse_notif</STRONG> (Thumb, 180 bytes, Stack size 136 bytes, nrf_ble_ancs_c.o(i.parse_notif))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = parse_notif
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_verify_notification_format
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_evt_gattc_notif
</UL>

<P><STRONG><a name="[21f]"></a>uint32_encode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_ble_ancs_c.o(i.uint32_encode))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_get_notif_attrs
</UL>

<P><STRONG><a name="[1fe]"></a>all_req_attrs_parsed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ancs_attr_parser.o(i.all_req_attrs_parsed))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_skip
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_len2_parse
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_id_parse
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_data_parse
</UL>

<P><STRONG><a name="[1e1]"></a>app_id_parse</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, ancs_attr_parser.o(i.app_id_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_id_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_parse_get_attrs_response
</UL>

<P><STRONG><a name="[1e5]"></a>attr_data_parse</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, ancs_attr_parser.o(i.attr_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attr_data_parse &rArr; attr_is_requested
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_is_requested
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_req_attrs_parsed
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_parse_get_attrs_response
</UL>

<P><STRONG><a name="[1e2]"></a>attr_id_parse</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ancs_attr_parser.o(i.attr_id_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attr_id_parse &rArr; attr_is_requested
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_is_requested
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_req_attrs_parsed
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_parse_get_attrs_response
</UL>

<P><STRONG><a name="[1fd]"></a>attr_is_requested</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ancs_attr_parser.o(i.attr_is_requested))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = attr_is_requested
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_skip
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_len2_parse
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_id_parse
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_data_parse
</UL>

<P><STRONG><a name="[1e3]"></a>attr_len1_parse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ancs_attr_parser.o(i.attr_len1_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attr_len1_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_parse_get_attrs_response
</UL>

<P><STRONG><a name="[1e4]"></a>attr_len2_parse</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ancs_attr_parser.o(i.attr_len2_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attr_len2_parse &rArr; attr_is_requested
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_is_requested
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_req_attrs_parsed
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_parse_get_attrs_response
</UL>

<P><STRONG><a name="[1e6]"></a>attr_skip</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ancs_attr_parser.o(i.attr_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attr_skip &rArr; attr_is_requested
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attr_is_requested
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_req_attrs_parsed
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_parse_get_attrs_response
</UL>

<P><STRONG><a name="[1df]"></a>command_id_parse</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, ancs_attr_parser.o(i.command_id_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = command_id_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_parse_get_attrs_response
</UL>

<P><STRONG><a name="[1e0]"></a>notif_uid_parse</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ancs_attr_parser.o(i.notif_uid_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = notif_uid_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ancs_parse_get_attrs_response
</UL>

<P><STRONG><a name="[161]"></a>clock_clk_started_notify</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[25e]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[30a]"></a>lfclk_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_lf_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[15e]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[30c]"></a>nrf_clock_lf_is_running</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_lf_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[30b]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[33a]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[dc]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[337]"></a>channel_port_alloc</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[de]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[338]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[df]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[333]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[db]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[348]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[da]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[335]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[336]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[332]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[334]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[339]"></a>pin_in_use_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[3dc]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3d9]"></a>nrf_uart_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3ac]"></a>nrf_uart_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
</UL>

<P><STRONG><a name="[3da]"></a>nrf_uart_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3d8]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3db]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3e1]"></a>nrf_uarte_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[3df]"></a>nrf_uarte_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[3e0]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[3e2]"></a>nrf_uarte_rx_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_rx_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[3ab]"></a>rx_byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3dd]"></a>rx_done_event</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3d7]"></a>tx_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3de]"></a>tx_done_event</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[1bb]"></a>uart_irq_handler</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>uarte_irq_handler</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_rx_amount_get
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, battery_adc.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPower
</UL>

<P><STRONG><a name="[122]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, battery_adc.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPower
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charger_status
</UL>

<P><STRONG><a name="[1ea]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[1ec]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[3d3]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
</UL>

<P><STRONG><a name="[1eb]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[262]"></a>compare_reg_update</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[3d0]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[3d1]"></a>expired_timers_handler</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[319]"></a>list_insertions_handler</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[265]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1ee]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[1ed]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[264]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1e9]"></a>rtc1_stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[263]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[3d6]"></a>timeout_handler_exec</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeout_handler_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[183]"></a>timer_list_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[3d2]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[31b]"></a>timer_list_insert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[31a]"></a>timer_list_remove</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[1ef]"></a>timer_start_op_schedule</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[1f0]"></a>timer_stop_op_schedule</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[165]"></a>timer_timeouts_check</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[266]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[3d4]"></a>user_op_alloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[3d5]"></a>user_op_enque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[1f2]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[1f1]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_util_platform.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[2a9]"></a>check_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fstorage.o(i.check_config))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[39d]"></a>erase_execute</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fstorage.o(i.erase_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2ad]"></a>fs_flash_page_end_addr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fstorage.o(i.fs_flash_page_end_addr))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
</UL>

<P><STRONG><a name="[2b1]"></a>on_operation_failure</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fstorage.o(i.on_operation_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_operation_failure &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>

<P><STRONG><a name="[2b0]"></a>on_operation_success</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, fstorage.o(i.on_operation_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_operation_success &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>

<P><STRONG><a name="[355]"></a>queue_advance</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fstorage.o(i.queue_advance))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
</UL>

<P><STRONG><a name="[2aa]"></a>queue_get_next_free</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fstorage.o(i.queue_get_next_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_get_next_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[2b2]"></a>queue_process</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fstorage.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_execute
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[2ab]"></a>queue_start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fstorage.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[354]"></a>send_event</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, fstorage.o(i.send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
</UL>

<P><STRONG><a name="[39c]"></a>store_execute</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fstorage.o(i.store_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = store_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1c8]"></a>address_is_valid</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fds.o(i.address_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = address_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[25a]"></a>chunk_is_aligned</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fds.o(i.chunk_is_aligned))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chunk_is_aligned
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[3a9]"></a>chunk_queue_get_and_advance</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_get_and_advance))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
</UL>

<P><STRONG><a name="[39f]"></a>chunk_queue_skip</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_skip))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[273]"></a>delete_execute</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[3a0]"></a>event_prepare</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, fds.o(i.event_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[28d]"></a>event_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[275]"></a>file_find_and_delete</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, fds.o(i.file_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = file_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[291]"></a>flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
</UL>

<P><STRONG><a name="[288]"></a>flag_is_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.flag_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
</UL>

<P><STRONG><a name="[28e]"></a>flag_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.flag_set))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
</UL>

<P><STRONG><a name="[11]"></a>fs_event_handler</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[2b5]"></a>gc_execute</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2c0]"></a>gc_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fds.o(i.gc_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[2b7]"></a>gc_next_page</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[2ba]"></a>gc_page_erase</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gc_page_erase &rArr; gc_swap_erase &rArr; fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[2bd]"></a>gc_page_next</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fds.o(i.gc_page_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>

<P><STRONG><a name="[2b9]"></a>gc_record_copy</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[2b8]"></a>gc_record_find_next</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[2b6]"></a>gc_state_advance</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_state_advance
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_update_swap_offset
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_pages
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[2be]"></a>gc_swap_erase</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fds.o(i.gc_swap_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gc_swap_erase &rArr; fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[2c2]"></a>gc_swap_pages</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fds.o(i.gc_swap_pages))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[2bb]"></a>gc_swap_promote</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.gc_swap_promote))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gc_swap_promote &rArr; page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[2bc]"></a>gc_tag_new_swap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fds.o(i.gc_tag_new_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gc_tag_new_swap &rArr; page_tag_write_swap &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[2c1]"></a>gc_update_swap_offset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.gc_update_swap_offset))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[35a]"></a>header_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fds.o(i.header_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[2fe]"></a>init_execute</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = init_execute &rArr; page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1c9]"></a>is_word_aligned</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_is_aligned
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>

<P><STRONG><a name="[289]"></a>op_enqueue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, fds.o(i.op_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = op_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_next
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
</UL>

<P><STRONG><a name="[3a2]"></a>page_from_record</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fds.o(i.page_from_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = page_from_record
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[3e8]"></a>page_has_space</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fds.o(i.page_has_space))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
</UL>

<P><STRONG><a name="[35b]"></a>page_identify</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fds.o(i.page_identify))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[35c]"></a>page_is_erased</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fds.o(i.page_is_erased))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[3e7]"></a>page_offsets_update</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[359]"></a>page_scan</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, fds.o(i.page_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[2c3]"></a>page_tag_write_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
</UL>

<P><STRONG><a name="[2c4]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = page_tag_write_swap &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
</UL>

<P><STRONG><a name="[290]"></a>pages_init</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, fds.o(i.pages_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pages_init &rArr; page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_is_erased
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[39b]"></a>queue_advance</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fds.o(i.queue_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_advance
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2ac]"></a>queue_process</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + In Cycle
<LI>Call Chain = queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[28a]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
</UL>

<P><STRONG><a name="[295]"></a>record_find</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[274]"></a>record_find_and_delete</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, fds.o(i.record_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = record_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[293]"></a>record_find_by_desc</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_from_record
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
</UL>

<P><STRONG><a name="[2bf]"></a>record_find_next</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[2a1]"></a>record_header_flag_dirty</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[3a3]"></a>record_header_write_begin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fds.o(i.record_header_write_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = record_header_write_begin &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[3a4]"></a>record_header_write_finalize</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.record_header_write_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = record_header_write_finalize &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[3a5]"></a>record_header_write_id</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.record_header_write_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = record_header_write_id &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[3e6]"></a>record_id_new</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.record_id_new))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[3a8]"></a>record_write_chunk</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fds.o(i.record_write_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = record_write_chunk &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_get_and_advance
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[29a]"></a>write_enqueue</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_id_new
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_is_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[39e]"></a>write_execute</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write_execute &rArr; record_write_chunk &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2a0]"></a>write_space_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.write_space_free))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[29e]"></a>write_space_reserve</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_has_space
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[3b5]"></a>sdk_mapped_flags_get_by_index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>

<P><STRONG><a name="[173]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[33e]"></a>nrf_saadc_channel_input_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_channel_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
</UL>

<P><STRONG><a name="[170]"></a>nrf_saadc_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>nrf_saadc_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_drv_saadc.o(i.nrf_saadc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[33b]"></a>nrf_saadc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>

<P><STRONG><a name="[33c]"></a>nrf_saadc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>

<P><STRONG><a name="[172]"></a>nrf_saadc_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_sample
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[2a2]"></a>finish_transfer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finish_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>

<P><STRONG><a name="[181]"></a>irq_handler_spi</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.irq_handler_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler_spi &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_event_clear
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[340]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[341]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[33f]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[2a3]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[306]"></a>nrf_spi_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.nrf_spi_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_spi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>

<P><STRONG><a name="[345]"></a>nrf_spi_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spi_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[342]"></a>nrf_spi_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spi_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[3c5]"></a>nrf_spi_txd_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spi_txd_set))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[346]"></a>spi_xfer</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_txd_set
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_disable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_event_clear
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[307]"></a>transfer_byte</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.transfer_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_txd_set
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>

<P><STRONG><a name="[175]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[17a]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[17c]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[17b]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[17f]"></a>_PrintInt</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[180]"></a>_PrintUnsigned</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[17e]"></a>_StoreChar</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[3c4]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, softdevice_handler.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[3b4]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softdevice_handler.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[3b3]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, softdevice_handler.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[3b2]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, softdevice_handler.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[19a]"></a>advertising_init</STRONG> (Thumb, 232 bytes, Stack size 144 bytes, s132config.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = advertising_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdv
</UL>

<P><STRONG><a name="[34d]"></a>app_attr_print</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, s132config.o(i.app_attr_print))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[5e]"></a>apple_notification_error_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, s132config.o(i.apple_notification_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = apple_notification_error_handler &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s132config.o(i.services_init)
</UL>
<P><STRONG><a name="[1f4]"></a>apple_notification_setup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, s132config.o(i.apple_notification_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = apple_notification_setup &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_notif_source_notif_enable
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_data_source_notif_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[50]"></a>ble_evt_dispatch</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, s132config.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ble_evt_dispatch &rArr; pm_on_ble_evt &rArr; sm_ble_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_ble_evt
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s132config.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[24e]"></a>ble_stack_init</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, s132config.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ble_stack_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
</UL>

<P><STRONG><a name="[52]"></a>conn_params_error_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, s132config.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s132config.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[a7]"></a>conn_params_init</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, s132config.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = conn_params_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToHightSpeed
</UL>

<P><STRONG><a name="[53]"></a>db_disc_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, s132config.o(i.db_disc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = db_disc_handler &rArr; ble_ancs_c_on_db_disc_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_on_db_disc_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s132config.o(i.db_discovery_init)
</UL>
<P><STRONG><a name="[270]"></a>db_discovery_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, s132config.o(i.db_discovery_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = db_discovery_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
</UL>

<P><STRONG><a name="[98]"></a>delete_bonds</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, s132config.o(i.delete_bonds))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = delete_bonds &rArr; pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AskPair
</UL>

<P><STRONG><a name="[34e]"></a>err_code_print</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, s132config.o(i.err_code_print))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[a6]"></a>gap_params_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, s132config.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gap_params_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeToHightSpeed
</UL>

<P><STRONG><a name="[2b3]"></a>gatt_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, s132config.o(i.gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = gatt_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
</UL>

<P><STRONG><a name="[320]"></a>notif_attr_print</STRONG> (Thumb, 538 bytes, Stack size 40 bytes, s132config.o(i.notif_attr_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = notif_attr_print &rArr; SendMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatMsg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[322]"></a>notif_print</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, s132config.o(i.notif_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = notif_print &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_ancs_c_request_attrs
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ancs_c_evt
</UL>

<P><STRONG><a name="[260]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, s132config.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_all_gpio
</UL>

<P><STRONG><a name="[261]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, s132config.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_all_gpio
</UL>

<P><STRONG><a name="[5f]"></a>nus_data_handler</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, s132config.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nus_data_handler &rArr; BleQueueIn
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleQueueIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s132config.o(i.services_nus_init)
</UL>
<P><STRONG><a name="[4e]"></a>on_adv_evt</STRONG> (Thumb, 128 bytes, Stack size 208 bytes, s132config.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = on_adv_evt &rArr; StartAdv &rArr; advertising_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_whitelist_reply
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s132config.o(i.advertising_init)
</UL>
<P><STRONG><a name="[5d]"></a>on_ancs_c_evt</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, s132config.o(i.on_ancs_c_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = on_ancs_c_evt &rArr; apple_notification_setup &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_ancs_c_handles_assign
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_print
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notif_attr_print
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_code_print
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_notification_setup
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_attr_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s132config.o(i.services_init)
</UL>
<P><STRONG><a name="[23e]"></a>on_ble_evt</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, s132config.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = on_ble_evt &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[388]"></a>peer_manager_init</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, s132config.o(i.peer_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = peer_manager_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_register
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
</UL>

<P><STRONG><a name="[5c]"></a>pm_evt_handler</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, s132config.o(i.pm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = pm_evt_handler &rArr; pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_start
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_config_reply
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s132config.o(i.peer_manager_init)
</UL>
<P><STRONG><a name="[3ad]"></a>services_init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, s132config.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = services_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_ancs_c_attr_add
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ancs_c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
</UL>

<P><STRONG><a name="[3ae]"></a>services_nus_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, s132config.o(i.services_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = services_nus_init &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s132_config_enable
</UL>

<P><STRONG><a name="[51]"></a>sys_evt_dispatch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, s132config.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sys_evt_dispatch &rArr; ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s132config.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[91]"></a>AskPacket</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, upfile.o(i.AskPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AskPacket &rArr; RfTx &rArr; RfTxOnly
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTx
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskP24UpdataFile
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfWritePacket
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBvkFlash
</UL>

<P><STRONG><a name="[3c8]"></a>Filter</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, pedometer_klx.o(i.Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_counter
</UL>

<P><STRONG><a name="[b1]"></a>DeleteWearFlg</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sleep.o(i.DeleteWearFlg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DeleteWearFlg &rArr; ReadSleepItem
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSleepItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSleep
</UL>

<P><STRONG><a name="[167]"></a>GetWriteAddr</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sleep.o(i.GetWriteAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetWriteAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSleep
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintfSleep
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSleepDatas
</UL>

<P><STRONG><a name="[b2]"></a>ReadSleepItem</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sleep.o(i.ReadSleepItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadSleepItem
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteWearFlg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintfSleep
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSleepDatas
</UL>

<P><STRONG><a name="[7e]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, lis3dh_driver.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
</UL>

<P><STRONG><a name="[13d]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lis3dh_driver.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>

<P><STRONG><a name="[7f]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lis3dh_driver.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccSensorConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>

<P><STRONG><a name="[d2]"></a>StartFlashSpi</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ex_flash.o(i.StartFlashSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = StartFlashSpi &rArr; EnableSpi &rArr; app_error_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSpi
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExFlash
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteCont
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadCont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
</UL>

<P><STRONG><a name="[d4]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ex_flash.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExFlash
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteCont
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadCont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashSpi
</UL>

<P><STRONG><a name="[d6]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ex_flash.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitExFlash
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteCont
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadCont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Sector_Erase
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashSpi
</UL>

<P><STRONG><a name="[132]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, lcd.o(i.LCD_Fast_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LCD_Fast_DrawPoint &rArr; lcd_spi_send &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_spi_send
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash_POINT
</UL>

<P><STRONG><a name="[12f]"></a>LCD_SetRegion</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lcd.o(i.LCD_SetRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LCD_SetRegion &rArr; lcd_spi_send &rArr; spi_send &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_spi_send
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ShowBmp_Flash
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIcon
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[136]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, lcd.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
</UL>

<P><STRONG><a name="[133]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trancs_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_Byte
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetRegion
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[134]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trancs_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display_on
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_Byte
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetRegion
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[3e4]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ui_app.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_key_to_power_off
</UL>

<P><STRONG><a name="[309]"></a>get_int</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ui_support.o(i.get_int))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_pair
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_distance
</UL>

<P><STRONG><a name="[11c]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, hr_app.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHeatRate
</UL>

<P><STRONG><a name="[11d]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hr_app.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHeatRate
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrs3300_power_on
</UL>

<P><STRONG><a name="[fc]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hr_app.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HrCheckWear
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCheckWearAndTestHr
</UL>

<P><STRONG><a name="[2e4]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hr_app.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrs3300_power_on
</UL>

<P><STRONG><a name="[eb]"></a>HRS_Chkack</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, iic_gpio.o(i.HRS_Chkack))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HRS_Chkack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_WriteBytes
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadBytes
</UL>

<P><STRONG><a name="[f5]"></a>HRS_i2c_begin</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, iic_gpio.o(i.HRS_i2c_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HRS_i2c_begin &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_WriteBytes
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadBytes
</UL>

<P><STRONG><a name="[f7]"></a>HRS_i2c_end</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, iic_gpio.o(i.HRS_i2c_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HRS_i2c_end &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_WriteBytes
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadBytes
</UL>

<P><STRONG><a name="[ed]"></a>HRS_i2c_udelay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iic_gpio.o(i.HRS_i2c_udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HRS_i2c_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_one_clk
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Restart
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_end
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_begin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Chkack
</UL>

<P><STRONG><a name="[347]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, iic_gpio.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[ec]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, iic_gpio.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadByteNAck
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Chkack
</UL>

<P><STRONG><a name="[f1]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, iic_gpio.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Restart
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadByteNAck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_end
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_begin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Chkack
</UL>

<P><STRONG><a name="[f0]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iic_gpio.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_one_clk
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_SendByte
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Restart
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_begin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Chkack
</UL>

<P><STRONG><a name="[ef]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iic_gpio.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadByteNAck
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Chkack
</UL>

<P><STRONG><a name="[ee]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iic_gpio.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_one_clk
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_SendByte
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Restart
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_ReadByteNAck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_end
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_i2c_begin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Chkack
</UL>

<P><STRONG><a name="[1c3]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[1c6]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c5]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
