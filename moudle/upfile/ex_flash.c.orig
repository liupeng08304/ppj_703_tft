#include "ex_flash.h"
#include "bsp.h"
#include "utility.h"
#define TYPE_W25X40 0x001330ef

uint32_t flashid;
bool SpiOkFlg=false;

/*
*********************************************************************************************************
*	函 数 名:void InitExFlash()
*	功能说明:
*
*       作    者 ：liupeng
*	形    参：
*       版    本：version 1.0
*	返 回 值: 无
*********************************************************************************************************
*/
void InitExFlash(void)
{

    nrf_gpio_cfg_output(FLASH_CS_PIN);
    Flash_ReadID();

}


/*
*********************************************************************************************************
*	函 数 名:void InitExFlash()
*	功能说明:
*
*       作    者 ：liupeng
*	形    参：
*       版    本：version 1.0
*	返 回 值: 无
*********************************************************************************************************
*/


uint8_t SpiSend(NRF_SPI_Type *spi,uint8_t datasend)
{

    uint32_t counter = 0;
    SpiOkFlg=true;
    spi->TXD = (uint32_t)(datasend);
    while ((spi->EVENTS_READY == 0U) && (counter < 0x3000))
    {
        counter++;
    }
    if (counter == 0x3000)
    {
        SpiOkFlg=false;
        return false;
    }
    else
    {   /* clear the event to be ready to receive next messages */
        spi->EVENTS_READY = 0U;
    }
    return (uint8_t)spi->RXD;

}





void SPI_FLASH_WaitForWriteEnd(void)
{
    uint8_t FLASH_Status;

   
    /* Send "Read Status Register" instruction */
    SpiSend(NRF_SPI0,ReadRigesterStutes);
    do
    {

        FLASH_Status= SpiSend(NRF_SPI0,Dummy_Byte);
    }
    while ( (FLASH_Status & 0x01) == 0x01);
    FLASH_CS_HIGH();




}
void StartFlashSpi(bool strtFlg)
{
    uint8_t i;
    if(true == strtFlg)
    {
        spi_master_init(SPI0,SPI_MODE0,false);
        DisableSpi0(false);

        for(i=0; i<10; i++)
        {
            FLASH_CS_LOW();
            delay_us(20);
            SpiSend(NRF_SPI0,NORMAL_POWER);
            FLASH_CS_HIGH();
            delay_us(20);
            if(SpiOkFlg==true)
            {
                return;
            } else
            {
                delay_us(1000);
            }
        }

    } else
    {
        FLASH_CS_HIGH();
         delay_us(10);
        for(i=0; i<10; i++)
        {
            FLASH_CS_LOW();
            delay_us(20);
            SpiSend(NRF_SPI0,POWER_DOWN);
            FLASH_CS_HIGH();
						delay_us(20);
            if(SpiOkFlg==true)
            {
                DisableSpi0(true);
                return;
            } else
            {
               delay_us(1000);
            }
        }
        DisableSpi0(true);

    }
}

//====================================================================
//函    数：
//功    能：
//
//输    入：
//
//
//====================================================================
uint32_t Flash_ReadID(void)
{

    uint8_t i;
    StartFlashSpi(true);
    for(i=0; i<3; i++)
    {
        FLASH_CS_LOW();
        SpiSend(NRF_SPI0,ID_READ);						//JEDEC-ID命令返回三个字节
        flashid	= SpiSend(NRF_SPI0,Dummy_Byte);						//BF
        flashid |= SpiSend(NRF_SPI0,Dummy_Byte)<<8;					//25
        flashid |= SpiSend(NRF_SPI0,Dummy_Byte)<<16;	//				//4A
        FLASH_CS_HIGH();
        delay_us(1000);																											//TYPE_W25X40
        if((0x00130662 == flashid)||(0x00132020 == flashid)||(0x001330ef == flashid))
        {
            StartFlashSpi(false);
            return flashid;
        }
    }
    StartFlashSpi(false);
    ex_flash_ok=0;
    return 0;
}
/*******************************************************************************
* Function Name  :
* Description    : Sector Erases 4K 40ms(type) 150ms(max)   64K 80ms(type) 250ms(max)
* Input          : Dst: address of the sector to erase.
* Output         : None
* Return         : None
*******************************************************************************/


void Flash_Sector_Erase(uint32_t Addr,uint8_t  size)
{
    uint8_t A1, A2, A3;

    if(ex_flash_ok==0) return;
    StartFlashSpi(true);
    A1 = (Addr >> 16) & 0xFF;
    A2 = (Addr >> 8 ) & 0xFF;
    A3 = (Addr      ) & 0xFF;
    FLASH_CS_LOW();
    SpiSend(NRF_SPI0,WRITE_ENABLE);
    FLASH_CS_HIGH();
    delay_us(100);
    FLASH_CS_LOW();
    if((TYPE_W25X40 == flashid)&&(SIZE_4k==size))
    {
        SpiSend(NRF_SPI0,0x20);
    } else
    {
        SpiSend(NRF_SPI0,size);
    }

    if(SIZE_FLASH!=size)
    {
        SpiSend(NRF_SPI0,A1);
        SpiSend(NRF_SPI0,A2);
        SpiSend(NRF_SPI0,A3);
    }
    FLASH_CS_HIGH();
    delay_us(100);
    SPI_FLASH_WaitForWriteEnd();
  delay_us(100);
    FLASH_CS_LOW();
    SpiSend(NRF_SPI0,WRITE_DISABLE);
    FLASH_CS_HIGH();
 delay_us(100);
    StartFlashSpi(false);

}
/*******************************************************************************
* Function Name  : SPI_FLASH_ReadCout
* Description    : Read more than one byte from the flash
* Input          : - ReadAddr: FLASH's internal address to Read from.
*                  - pBuffer: pointer to the buffer  containing the data to be
*				     read from the FLASH.
*				   - NumByteToWrite: number of bytes to read from the FLASH,
*				     must be equal or less than the capability of FLASH
* Output         : None
* Return         : None
*******************************************************************************/
void SPI_FLASH_ReadCont(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
    uint16_t i=0;
    uint8_t a1,a2, a3;
    if(ex_flash_ok==0) return;

    StartFlashSpi(true);
    a1 = (ReadAddr >> 16) & 0xFF;
    a2 = (ReadAddr >> 8 ) & 0xFF;
    a3 = (ReadAddr      ) & 0xFF;

    FLASH_CS_LOW();
    SpiSend(NRF_SPI0,READ_FLASH_FAST);
    SpiSend(NRF_SPI0,a1);
    SpiSend(NRF_SPI0,a2);
    SpiSend(NRF_SPI0,a3);
    SpiSend(NRF_SPI0,Dummy_Byte);

    while (NumByteToRead--)
    {
        pBuffer[i]=  SpiSend(NRF_SPI0,Dummy_Byte);
        i++;
    }
    // SPI_FLASH_WaitForWriteEnd();
    StartFlashSpi(false);

}

/*******************************************************************************
//函    数：S25FL032p
//功    能：从指定地址WriteAddr开始，读取NumByteToWrite个数据到*pBuffer中 ,最大256Byte
//			超出部分将被忽略

*******************************************************************************/
void SPI_FLASH_WriteCont(uint8_t *pBuffer, uint32_t WriteAddr, uint32_t NumByteToWrite,bool erase)
{

//#define WRITE_B
    uint8_t a1,a2,a3;
    uint16_t i=0;
#ifdef WRITE_B
    uint32_t b;
#endif
			if(ex_flash_ok==0) return;



    if((erase==true)&&(WriteAddr%4096==0))
    {
        Flash_Sector_Erase(WriteAddr,SIZE_4k);
    }
    StartFlashSpi(true);

L1:

  delay_us(10);
#ifdef WRITE_B
    b=WriteAddr%256;
    WriteAddr=WriteAddr-b;
#endif
    a1 = (WriteAddr >> 16) & 0xFF;
    a2 = (WriteAddr >> 8 ) & 0xFF;
    a3 = (WriteAddr      ) & 0xFF;
    FLASH_CS_HIGH();
   delay_us(10);
    SPI_FLASH_WaitForWriteEnd();
    FLASH_CS_LOW();
   delay_us(10);
    SpiSend(NRF_SPI0,WRITE_ENABLE);
    FLASH_CS_HIGH();
    delay_us(10);
    SPI_FLASH_WaitForWriteEnd();
    FLASH_CS_LOW();
 delay_us(10);
    SpiSend(NRF_SPI0,WRITE_PAGE);
    SpiSend(NRF_SPI0,a1);
    SpiSend(NRF_SPI0,a2);
    SpiSend(NRF_SPI0,a3);

#ifdef WRITE_B
    while(b)
    {
        SpiSend(NRF_SPI0,0xff);
        b--;
        WriteAddr++;
    }
#endif

    while (NumByteToWrite--)
    {

        SpiSend(NRF_SPI0,pBuffer[i]);
        i++;
        WriteAddr++;
        if((WriteAddr%256==0)&&(NumByteToWrite>0))
        {
            FLASH_CS_HIGH();
           delay_us(10);
            SPI_FLASH_WaitForWriteEnd();
            if((erase==true)&&(WriteAddr%4096==0))
            {
                Flash_Sector_Erase(WriteAddr,SIZE_4k);

            }

            goto L1;
        }



    }
    FLASH_CS_HIGH();
    SPI_FLASH_WaitForWriteEnd();
  delay_us(10);
    FLASH_CS_LOW();
 delay_us(10);
    SpiSend(NRF_SPI0,WRITE_DISABLE);
    FLASH_CS_HIGH();
 delay_us(10);
    StartFlashSpi(false);
 delay_us(10);
}



//void DisableSpi0(bool clsflg)
//{
//    if(true==clsflg)
//    {
//        /* DISABLE */
//        NRF_SPI0->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
//    } else
//    {
//        /* Enable */
//        NRF_SPI0->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
//    }

//}


//NRF_SPI0



//uint32_t* spi_master_init(SPIModuleNumber module_number, SPIMode mode, bool lsb_first)
//{
//    uint32_t config_mode;
//    static char first=0x0a;
//    NRF_SPI_Type *spi_base_address = (SPI0 == module_number)? NRF_SPI0 : (NRF_SPI_Type *)NRF_SPI1;

//    if(SPI0 == module_number)
//    {
//        if(first==0x0a)
//        {


//            /* Configure GPIO pins used for pselsck, pselmosi, pselmiso and pselss for SPI0 */
//            nrf_gpio_cfg_output(SPI0_SCK_PIN);
//            nrf_gpio_cfg_output(SPI0_MOSI_PIN);
//            nrf_gpio_cfg_input(SPI0_MISO_PIN, NRF_GPIO_PIN_NOPULL);


//            /* Configure pins, frequency and mode */
//            spi_base_address->PSELSCK  = SPI0_SCK_PIN;
//            spi_base_address->PSELMOSI = SPI0_MOSI_PIN;
//            spi_base_address->PSELMISO = SPI0_MISO_PIN;

//        }

//    }


//    if(first==0x0a)
//    {
//        first=0;
//        spi_base_address->FREQUENCY = (uint32_t) SPI_OPERATING_FREQUENCY;
//    }
//    /*lint -e845 -save // A zero has been given as right argument to operator '!'" */
//    /** @snippet [SPI Select mode] */
//    switch (mode )
//    {

//    case SPI_MODE0:
//        config_mode = (SPI_CONFIG_CPHA_Leading << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos);
//        break;
//    case SPI_MODE1:
//        config_mode = (SPI_CONFIG_CPHA_Trailing << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos);
//        break;
//    case SPI_MODE2:
//        config_mode = (SPI_CONFIG_CPHA_Leading << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveLow << SPI_CONFIG_CPOL_Pos);
//        break;
//    case SPI_MODE3:
//        config_mode = (SPI_CONFIG_CPHA_Trailing << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveLow << SPI_CONFIG_CPOL_Pos);
//        break;
//    default:
//        config_mode = 0;
//        break;

//    }
//    /** @snippet [SPI Select mode] */
//    /*lint -restore */

//    /*lint -e845 -save // A zero has been given as right argument to operator '!'" */
//    /** @snippet [SPI Select endianess] */
//    if (lsb_first)
//    {
//        spi_base_address->CONFIG = (config_mode | (SPI_CONFIG_ORDER_LsbFirst << SPI_CONFIG_ORDER_Pos));
//    }
//    else
//    {
//        spi_base_address->CONFIG = (config_mode | (SPI_CONFIG_ORDER_MsbFirst << SPI_CONFIG_ORDER_Pos));
//    }
//    /** @snippet [SPI Select endianess] */
//    /*lint -restore */

//    spi_base_address->EVENTS_READY = 0U;

//    /* Enable */
//    spi_base_address->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);

//    return (uint32_t *)spi_base_address;
//}









