#include "lcd.h"
#include "lcdfont.h"
//#include "delay.h"

//LCD的画笔颜色和背景色
uint16_t POINT_COLOR=WHITE;    //画笔颜色
uint16_t BACK_COLOR=BLACK;  //背景色






//LCD GPIO端口初始化
void LCD_GPIO_Init(void)
{
    nrf_gpio_cfg_output(LCD_SCLK_GPIO_Pin);
    SCK_LOW();


    nrf_gpio_cfg_output(LCD_SDIN_GPIO_Pin);
    SDIN_LOW();

    nrf_gpio_cfg_output(LCD_RST_GPIO_Pin);
    RST_HIGH();

    nrf_gpio_cfg_output(LCD_RS_GPIO_Pin);
    RS_LOW();


    nrf_gpio_cfg_output(LCD_CS_GPIO_Pin);
    CS_HIGH();

    nrf_gpio_cfg_output(LCD_LED_GPIO_Pin);
    LED_ON();
//  while(1);
}
//向ST7735R写入一个字节。
//dat:要写入的数据/命令
//cmd:数据/命令标志 0,表示命令;1,表示数据;
void LCD_WR_Byte(uint8_t dat,uint8_t cmd)
{

  if(0==cmd)
   RS_LOW();
    CS_LOW();
    lcd_spi_send(&dat,1);
    CS_HIGH();
    RS_HIGH();
}



void start_trancs_data(bool start)
{
    if(start==true)
    {
        RS_HIGH();
        CS_LOW();
    }
    else
    {
        CS_HIGH();
        RS_HIGH();
    }

}



//LCD 复位
void LCD_Reset(void)
{
    CS_HIGH();
    RST_HIGH();
    RST_LOW();
    delay_ms(100);
    RST_HIGH();
    delay_ms(50);
}


void EnLcdSpi(bool enflg)
{

    if(true==enflg)
    {
        EnableSpi(true,MODE_LCD_SPI,0xff,LCD_SDIN_GPIO_Pin,LCD_SCLK_GPIO_Pin);

    }
    else
    {

        EnableSpi(false,MODE_LCD_SPI,0xff,LCD_SDIN_GPIO_Pin,LCD_SCLK_GPIO_Pin);

    }


}

void oled_display_on(bool on_flg)
{
    EnLcdSpi(true);

    if(true==on_flg)
    {
        LCD_WR_Byte(0x11,LCD_CMD); //Sleep out
        delay_ms(120);
        LED_ON();
        LCD_WR_Byte(0x29,LCD_CMD); //Display on
    }
    else
    {
        LCD_WR_Byte(0x28,LCD_CMD); //Display off
        LCD_WR_Byte(0x10,LCD_CMD); //Sleep in
        LED_OFF();

    }
    EnLcdSpi(false);
}

//LCD 初始化
void LCD_Init(void)
{






    LCD_GPIO_Init();             //端口初始化
    LCD_Reset();                 //LCD复位，在LCD初始化之前

    delay_ms(120);
    EnLcdSpi(true);
    LCD_WR_Byte(0x11,LCD_CMD); //Sleep out
    delay_ms(120);

    LCD_WR_Byte(0x28,LCD_CMD); //Display off
    LED_OFF();

    LCD_WR_Byte(0xB1,LCD_CMD); //帧率控制
    LCD_WR_Byte(0x01,LCD_DATA);
    LCD_WR_Byte(0x2C,LCD_DATA);
    LCD_WR_Byte(0x2D,LCD_DATA);

    LCD_WR_Byte(0xB2,LCD_CMD);
    LCD_WR_Byte(0x01,LCD_DATA);
    LCD_WR_Byte(0x2C,LCD_DATA);
    LCD_WR_Byte(0x2D,LCD_DATA);

    LCD_WR_Byte(0xB3,LCD_CMD);
    LCD_WR_Byte(0x01,LCD_DATA);
    LCD_WR_Byte(0x2C,LCD_DATA);
    LCD_WR_Byte(0x2D,LCD_DATA);
    LCD_WR_Byte(0x01,LCD_DATA);
    LCD_WR_Byte(0x2C,LCD_DATA);
    LCD_WR_Byte(0x2D,LCD_DATA);

    LCD_WR_Byte(0xB4,LCD_CMD);
    LCD_WR_Byte(0x03,LCD_DATA);

    LCD_WR_Byte(0xB6,LCD_CMD);
    LCD_WR_Byte(0xB4,LCD_DATA);
    LCD_WR_Byte(0xF0,LCD_DATA);

    LCD_WR_Byte(0xC0,LCD_CMD);
    LCD_WR_Byte(0xA2,LCD_DATA);
    LCD_WR_Byte(0x02,LCD_DATA);
    LCD_WR_Byte(0x84,LCD_DATA);

    LCD_WR_Byte(0xC1,LCD_CMD);
    LCD_WR_Byte(0xC5,LCD_DATA);

    LCD_WR_Byte(0xC2,LCD_CMD);
    LCD_WR_Byte(0x0A,LCD_DATA);
    LCD_WR_Byte(0x00,LCD_DATA);

    LCD_WR_Byte(0xC3,LCD_CMD);
    LCD_WR_Byte(0x8A,LCD_DATA);
    LCD_WR_Byte(0x2A,LCD_DATA);

    LCD_WR_Byte(0xC4,LCD_CMD);
    LCD_WR_Byte(0x8A,LCD_DATA);
    LCD_WR_Byte(0xEE,LCD_DATA);

    LCD_WR_Byte(0xC5,LCD_CMD);
    LCD_WR_Byte(0x0A,LCD_DATA);

    LCD_WR_Byte(0x36,LCD_CMD); //MX, MY, RGB mode
    LCD_WR_Byte(0xC8,LCD_DATA);  //0x68

    LCD_WR_Byte(0xe0,LCD_CMD);
    LCD_WR_Byte(0x02,LCD_DATA);
    LCD_WR_Byte(0x1c,LCD_DATA);
    LCD_WR_Byte(0x07,LCD_DATA);
    LCD_WR_Byte(0x12,LCD_DATA);
    LCD_WR_Byte(0x37,LCD_DATA);
    LCD_WR_Byte(0x32,LCD_DATA);
    LCD_WR_Byte(0x29,LCD_DATA);
    LCD_WR_Byte(0x2d,LCD_DATA);
    LCD_WR_Byte(0x29,LCD_DATA);
    LCD_WR_Byte(0x25,LCD_DATA);
    LCD_WR_Byte(0x2b,LCD_DATA);
    LCD_WR_Byte(0x39,LCD_DATA);
    LCD_WR_Byte(0x00,LCD_DATA);
    LCD_WR_Byte(0x01,LCD_DATA);
    LCD_WR_Byte(0x03,LCD_DATA);
    LCD_WR_Byte(0x10,LCD_DATA);

    LCD_WR_Byte(0xe1,LCD_CMD);
    LCD_WR_Byte(0x03,LCD_DATA);
    LCD_WR_Byte(0x1d,LCD_DATA);
    LCD_WR_Byte(0x07,LCD_DATA);
    LCD_WR_Byte(0x06,LCD_DATA);
    LCD_WR_Byte(0x2e,LCD_DATA);
    LCD_WR_Byte(0x2c,LCD_DATA);
    LCD_WR_Byte(0x29,LCD_DATA);
    LCD_WR_Byte(0x2d,LCD_DATA);
    LCD_WR_Byte(0x2e,LCD_DATA);
    LCD_WR_Byte(0x2e,LCD_DATA);
    LCD_WR_Byte(0x37,LCD_DATA);
    LCD_WR_Byte(0x3f,LCD_DATA);
    LCD_WR_Byte(0x00,LCD_DATA);
    LCD_WR_Byte(0x00,LCD_DATA);
    LCD_WR_Byte(0x02,LCD_DATA);
    LCD_WR_Byte(0x10,LCD_DATA);



    LCD_WR_Byte(0xF0,LCD_CMD);
    LCD_WR_Byte(0x01,LCD_DATA);
    LCD_WR_Byte(0xF6,LCD_CMD);
    LCD_WR_Byte(0x00,LCD_DATA);

    LCD_WR_Byte(0x3A,LCD_CMD); //65k mode
    LCD_WR_Byte(0x05,LCD_DATA);
//     LCD_WR_Byte(0x29,LCD_CMD); //Display on
//  LCD_WR_Byte(0x28,LCD_CMD); //Display off
    EnLcdSpi(false);


    oled_display_on(true);
    LCD_Clear(BLACK);
    oled_display_on(false);

}
//设置lcd显示区域，在此区域写点数据自动换行
//xy起点和终点
static void LCD_SetRegion(uint16_t x_start,uint16_t y_start,uint16_t x_end,uint16_t y_end)
{

#if 0
    LCD_WR_Byte(0x2a,LCD_CMD);
	
    LCD_WR_Byte((x_start+0)>>8,LCD_DATA);
    LCD_WR_Byte((x_start+0),LCD_DATA);
    LCD_WR_Byte((x_end-1)>>8,LCD_DATA);
    LCD_WR_Byte(x_end-1,LCD_DATA);

    LCD_WR_Byte(0x2b,LCD_CMD);
	
    LCD_WR_Byte((y_start+0)>>8,LCD_DATA);
    LCD_WR_Byte(y_start+0,LCD_DATA);
    LCD_WR_Byte((y_end-1)>>8,LCD_DATA);
    LCD_WR_Byte(y_end-1,LCD_DATA);

	
    LCD_WR_Byte(0x2c,LCD_CMD);
#endif



uint8_t buf[4];
CS_LOW();
RS_LOW();
buf[0]=0x2a;
lcd_spi_send(buf,1);
RS_HIGH();
buf[0]=0;
buf[1]=x_start;
buf[2]=0;
buf[3]=x_end-1;
lcd_spi_send(buf,4);

RS_LOW();
buf[0]=0x2b;
lcd_spi_send(buf,1);
RS_HIGH();
buf[0]=0;
buf[1]=y_start;
buf[2]=0;
buf[3]=y_end-1;
lcd_spi_send(buf,4);

RS_LOW();
buf[0]=0x2c;
lcd_spi_send(buf,1);
RS_HIGH();
CS_HIGH();


}

//快速画一个点
//x,y:坐标
//color:颜色
static void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
    uint8_t buf[4];
	CS_LOW();
	RS_LOW();
	buf[0]=0x2a;
    lcd_spi_send(buf,1);
	RS_HIGH();
	buf[0]=0;
	buf[1]=x;
	buf[2]=0;
	buf[3]=x;
    lcd_spi_send(buf,4);

	RS_LOW();
	buf[0]=0x2b;
    lcd_spi_send(buf,1);
	RS_HIGH();
	buf[0]=0;
	buf[1]=y;
	buf[2]=0;
	buf[3]=y;
    lcd_spi_send(buf,4);

	RS_LOW();
	buf[0]=0x2c;
    lcd_spi_send(buf,1);
	RS_HIGH();

    buf[0]=color>>8;
    buf[1]=color;
	lcd_spi_send(buf,2);

    CS_HIGH();
    RS_HIGH();


}
//LCD清屏函数
//color:填充的函数
void LCD_Clear(uint16_t color)///可以优化
{
    uint32_t i,m;
    uint8_t buf[2];

    EnLcdSpi(true);


    LCD_SetRegion(0,0,LCD_WIDTH,LCD_HEIGHT);
    i=LCD_WIDTH*LCD_HEIGHT;

    start_trancs_data(true);

    for(m=0; m<i; m++)
    {
        buf[0]=color>>8;
        buf[1]=color;
        lcd_spi_send(buf,2);
    }
    start_trancs_data(false);
    EnLcdSpi(false);


}





void TFT_ShowBmp(uint16_t x,uint16_t y,uint16_t xsize,uint16_t ysize,const uint8_t *p)
{
    uint32_t size,temp;
    COLOUR_UNI Colour;
    EnLcdSpi(true);

    LCD_SetRegion(x,y,x+xsize,y+ysize);

    temp=(uint32_t)xsize*ysize;
    start_trancs_data(true);
    for(size=0; size<temp; size++)
    {
        Colour.buf[0]=*(p+size*2+1);
        Colour.buf[1]=*(p+size*2+0);
        lcd_spi_send(Colour.buf,2);//(uint8_t*)&
    }
    start_trancs_data(false);
    EnLcdSpi(false);
}



#define BUF_SIZE 256

void TFT_ShowBmp_Flash(uint16_t x,uint16_t y,uint16_t xsize,uint16_t ysize,const uint32_t addr)
{
    uint32_t i,temp,numbers,len,j,lastlen;
    COLOUR_UNI Colour;
    uint8_t *p;
#define BUF_SIZE 256
    uint16_t buf[BUF_SIZE];
    EnLcdSpi(true);

    LCD_SetRegion(x,y,x+xsize,y+ysize);

    lastlen=0;
    len=BUF_SIZE;
    temp=(uint32_t)xsize*ysize;
    numbers=temp/BUF_SIZE;
    if(temp%BUF_SIZE)
    {
        numbers++;
        lastlen=temp%BUF_SIZE;

    }
    start_trancs_data(true);


    memset(buf,0,BUF_SIZE);
    p=(uint8_t *)buf;
    for(j=0; j<numbers; j++)
    {

        if(uifilecrc!=0xffff)
            SPI_FLASH_ReadCont((uint8_t *)buf,addr+j*BUF_SIZE*2,len*2);
        if((j==(numbers-1))&&(lastlen))
        {
            len=lastlen;
        }

        for(i=0; i<len; i++)
        {
            Colour.buf[0]=*(p+i*2+1);
            Colour.buf[1]=*(p+i*2+0);
            lcd_spi_send(Colour.buf,2);
        }
    }


    start_trancs_data(false);
    EnLcdSpi(false);
}



void ShowIcon(uint8_t x,uint8_t y,uint8_t xsize,uint8_t ysize,uint8_t*pdata,uint8_t mode)
{
    uint8_t t,temp,t1,y0=y;
    //得到字体一个字符对应点阵集所占的字节数
    uint16_t csize=(ysize/8+((ysize%8)?1:0))*xsize;
    if(mode&0x80)
        EnLcdSpi(true);
    for(t=0; t<csize; t++)
    {
        temp=pdata[t];
        for(t1=0; t1<8; t1++)
        {
            if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
            else if(mode&0x01)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
            temp<<=1;
            y++;
            if(y>=LCD_HEIGHT)
            {
                goto END;    //超区域了
            }
            if((y-y0)==ysize)
            {
                y=y0;
                x++;
                if(x>=LCD_WIDTH)
                {
                    goto END; //超区域了
                }
                break;
            }
        }
    }
END:
    if(mode&0x40)
        EnLcdSpi(false);

}



void TFT_ShowBmp_Flash_POINT(uint16_t x,uint16_t y,uint16_t xsize,uint16_t ysize,uint32_t addr,uint8_t mode)
{
    uint32_t i,temp,numbers,len,j,lastlen,xP,xE,yP;//,yE;
    COLOUR_UNI Colour;
    uint8_t *p;
#define BUF_SIZE 256
    uint16_t buf[BUF_SIZE];
    EnLcdSpi(true);

    //LCD_SetRegion(x,y,x+xsize,y+ysize);

    lastlen=0;
    len=BUF_SIZE;
    temp=(uint32_t)xsize*ysize;
    numbers=temp/BUF_SIZE;
    if(temp%BUF_SIZE)
    {
        numbers++;
        lastlen=temp%BUF_SIZE;

    }
    // start_trancs_data(true);


    memset(buf,0,BUF_SIZE);
    p=(uint8_t *)buf;
    xP=x;
    yP=y;
    xE=x+xsize;
//  yE=y+ysize;
    for(j=0; j<numbers; j++)
    {

        if(uifilecrc!=0xffff)
            SPI_FLASH_ReadCont((uint8_t *)buf,addr+j*BUF_SIZE*2,len*2);
        if((j==(numbers-1))&&(lastlen))
        {
            len=lastlen;
        }


        for(i=0; i<len; i++)
        {

            Colour.buf[0]=*(p+i*2+0);
            Colour.buf[1]=*(p+i*2+1);

            //  for(i=0; i<len; i++)
            //  {
            //
            //      lcd_spi_send(Colour.buf,2);
            //  }

            if(Colour.colour!=BLACK)
                LCD_Fast_DrawPoint(xP,yP,Colour.colour);
            else if(mode&0x01)
                LCD_Fast_DrawPoint(xP,yP,BACK_COLOR);



            xP++;
            if(xP>=xE)
            {
                xP=x;
                yP++;
            }
        }
    }


    // start_trancs_data(false);
    EnLcdSpi(false);
}


#if 0
void ShowIcon_Flash(uint8_t x,uint8_t y,uint8_t xsize,uint8_t ysize,uint32_t addr,uint8_t mode)
{
    uint8_t temp;
    uint8_t buf[BUF_SIZE];
    uint16_t len,lastLen,num,i,t,t1,y0=y;
    //得到字体一个字符对应点阵集所占的字节数
    uint16_t csize=(ysize/8+((ysize%8)?1:0))*xsize;
    if(mode&0x80)
        EnLcdSpi(true);
    len=BUF_SIZE;
    memset(buf,0,BUF_SIZE);

    lastLen=BUF_SIZE;
    len=BUF_SIZE;
    num=(csize/BUF_SIZE);
    if((csize%BUF_SIZE))
    {
        lastLen=csize%BUF_SIZE;
        num++;
    }




    for(t=0; t<num; t++)
    {

        if(uifilecrc!=0xffff)
            SPI_FLASH_ReadCont((uint8_t *)buf,addr+t*BUF_SIZE,len);

        if(t==(num-1))
        {
            len=lastLen;
        }
        for(i=0; i<len; i++)
        {
            temp=buf[i];
            for(t1=0; t1<8; t1++)
            {
                if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
                else if(mode&0x01)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
                temp<<=1;
                y++;
                if(y>=LCD_HEIGHT)
                {
                    goto END;    //超区域了
                }
                if((y-y0)==ysize)
                {
                    y=y0;
                    x++;
                    if(x>=LCD_WIDTH)
                    {
                        goto END; //超区域了
                    }
                    break;
                }
            }
        }
    }
END:
    if(mode&0x40)
        EnLcdSpi(false);

}
#endif



